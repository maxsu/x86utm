; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27040.0 

	TITLE	D:\_HP_Stream\__NLU_Notes\__Work_In_Progress\__Halt_Decider_X86\___x86utm_VS\Prior_Versions\2023_02_07\Halt7.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_BEGIN
PUBLIC	_Heap_PTR
PUBLIC	_Heap_END
PUBLIC	_END
_DATA	SEGMENT
_BEGIN	DB	'BEGIN STATIC DATA', 00H
	ORG $+2
_Heap_PTR DD	011111111H
_Heap_END DD	022222222H
_END	DB	'END STATIC DATA', 00H
_DATA	ENDS
PUBLIC	_OutputString
PUBLIC	_Output
PUBLIC	_Allocate
PUBLIC	_SaveState
PUBLIC	_LoadState
PUBLIC	_DebugStep
PUBLIC	_PushBack
PUBLIC	_StackPush
PUBLIC	_get_code_end
PUBLIC	_Last_Address_Of_Operating_System
PUBLIC	_Output_Decoded
PUBLIC	_CopyMachineCode
PUBLIC	_Infinite_Loop_Needs_To_Be_Aborted_Trace
PUBLIC	_Infinite_Recursion_Needs_To_Be_Aborted_Trace
PUBLIC	_Infinite_Simulation_Needs_To_Be_Aborted_Trace0
PUBLIC	_Needs_To_Be_Aborted0
PUBLIC	_Decide_Halting0
PUBLIC	_Init_slave_state0
PUBLIC	_Infinite_Simulation_Needs_To_Be_Aborted_Trace
PUBLIC	_Needs_To_Be_Aborted
PUBLIC	_Decide_Halting
PUBLIC	_Init_slave_state
PUBLIC	_Needs_To_Be_Aborted_Trace_HH
PUBLIC	_Needs_To_Be_Aborted_HH
PUBLIC	_Decide_Halting_HH
PUBLIC	_Init_Halts_HH
PUBLIC	_HH
PUBLIC	_H1
PUBLIC	_H
PUBLIC	_Sipser_H
PUBLIC	_Kozen_K
PUBLIC	_H0
PUBLIC	_T
PUBLIC	_Halts
PUBLIC	_Infinite_Loop2
PUBLIC	_Infinite_Loop3
PUBLIC	_Add3
PUBLIC	_HR
PUBLIC	_PR
PUBLIC	_Simulate
PUBLIC	_Py
PUBLIC	_Pz
PUBLIC	_Px
PUBLIC	_Sipser_D
PUBLIC	_Strachey_P
PUBLIC	_Kozen_N
PUBLIC	_PP
PUBLIC	_P
PUBLIC	_E
PUBLIC	_DD
PUBLIC	_D
PUBLIC	_Infinite_Recursion
PUBLIC	_Infinite_Loop
PUBLIC	_main
_DATA	SEGMENT
$SG9419	DB	'source[N]: ', 00H
$SG9420	DB	'CopyMachineCode destination[-1]: ', 00H
	ORG $+2
$SG9421	DB	'CopyMachineCode destination[-2]: ', 00H
	ORG $+2
$SG9542	DB	'Infinite Loop Detected Simulation Stopped', 0aH, 0aH, 00H
$SG9544	DB	'Infinite Recursion Detected Simulation Stopped', 0aH, 0aH
	DB	00H
	ORG $+3
$SG9546	DB	'Infinitely Recursive Simulation Detected Simulation Stop'
	DB	'ped', 0aH, 0aH, 00H
	ORG $+2
$SG9645	DB	'Infinite Loop Detected Simulation Stopped', 0aH, 0aH, 00H
$SG9647	DB	'Infinite Recursion Detected Simulation Stopped', 0aH, 0aH
	DB	00H
	ORG $+3
$SG9649	DB	'Infinitely Recursive Simulation Detected Simulation Stop'
	DB	'ped', 0aH, 0aH, 00H
	ORG $+2
$SG9687	DB	'Local Halt Decider: Infinite Loop Detected Simulation St'
	DB	'opped', 0aH, 0aH, 00H
$SG9693	DB	'Local Halt Decider: Infinite Recursion Detected Simulati'
	DB	'on Stopped', 0aH, 0aH, 00H
	ORG $+3
$SG9773	DB	'New slave_stack at:', 00H
$SG9832	DB	0aH, 'H1: Begin Simulation   Execution Trace Stored at:', 00H
	ORG $+1
$SG9775	DB	0aH, 'Begin Local Halt Decider Simulation   Execution Tra'
	DB	'ce Stored at:', 00H
	ORG $+2
$SG9833	DB	'Address_of_H1:', 00H
	ORG $+1
$SG9835	DB	'H1: ', 00H
	ORG $+3
$SG9836	DB	'H1: End Simulation   Input Terminated Normally', 0aH, 0aH
	DB	00H
	ORG $+3
$SG9870	DB	0aH, 'H: Begin Simulation   Execution Trace Stored at:', 00H
	ORG $+2
$SG9871	DB	'Address_of_H:', 00H
	ORG $+2
$SG9873	DB	'H: ', 00H
$SG9874	DB	'H: End Simulation   Input Terminated Normally', 0aH, 0aH
	DB	00H
$SG9908	DB	0aH, 'Sipser_H: Begin Simulation   Execution Trace Stored'
	DB	' at:', 00H
	ORG $+3
$SG9909	DB	'Address_of_Sipser_H:', 00H
	ORG $+3
$SG9911	DB	'Sipser_H: ', 00H
	ORG $+1
$SG9912	DB	'Sipser_H: End Simulation   Input Terminated Normally', 0aH
	DB	0aH, 00H
	ORG $+1
$SG9946	DB	0aH, 'H: Begin Simulation   Execution Trace Stored at:', 00H
	ORG $+2
$SG9947	DB	'Address_of_Kozen_K:', 00H
$SG9949	DB	'Kozen_K: ', 00H
	ORG $+2
$SG9950	DB	'Kozen_K: End Simulation   Input Terminated Normally', 0aH
	DB	0aH, 00H
	ORG $+2
$SG9977	DB	0aH, 'H0: Begin Simulation   Execution Trace Stored at:', 00H
	ORG $+1
$SG9978	DB	'Address_of_H0:', 00H
	ORG $+1
$SG9980	DB	'H0: ', 00H
	ORG $+3
$SG9981	DB	'H: End Simulation   Input Terminated Normally', 0aH, 0aH
	DB	00H
$SG10008 DB	0aH, 'T: Begin Simulation   Execution Trace Stored at:', 00H
	ORG $+2
$SG10009 DB	'Address_of_T:', 00H
	ORG $+2
$SG10011 DB	'T: ', 00H
$SG10012 DB	'H: End Simulation   Input Terminated Normally', 0aH, 0aH
	DB	00H
$SG10107 DB	'x[0]', 00H
	ORG $+3
$SG10108 DB	'x[1]', 00H
	ORG $+3
$SG10109 DB	'x[2]', 00H
	ORG $+3
$SG10110 DB	'x[3]', 00H
	ORG $+3
$SG10128 DB	'Input_Halts = ', 00H
_DATA	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_main	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 961
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 974
  00003	68 00 00 00 00	 push	 OFFSET _D
  00008	68 00 00 00 00	 push	 OFFSET _D
  0000d	e8 00 00 00 00	 call	 _H
  00012	83 c4 08	 add	 esp, 8
  00015	50		 push	 eax
  00016	68 00 00 00 00	 push	 OFFSET $SG10128
  0001b	e8 00 00 00 00	 call	 _Output
  00020	83 c4 08	 add	 esp, 8
; Line 985
  00023	33 c0		 xor	 eax, eax
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Infinite_Loop PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 956
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$HERE$3:
; Line 957
  00003	eb fe		 jmp	 SHORT $HERE$3
; Line 958
  00005	5d		 pop	 ebp
  00006	c3		 ret	 0
_Infinite_Loop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_N$ = 8							; size = 4
_Infinite_Recursion PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 951
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 952
  00003	8b 45 08	 mov	 eax, DWORD PTR _N$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _Infinite_Recursion
  0000c	83 c4 04	 add	 esp, 4
; Line 953
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_Infinite_Recursion ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Halt_Status$ = -4					; size = 4
_x$ = 8							; size = 4
_D	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 943
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 944
  00004	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00007	50		 push	 eax
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 _H
  00011	83 c4 08	 add	 esp, 8
  00014	89 45 fc	 mov	 DWORD PTR _Halt_Status$[ebp], eax
; Line 945
  00017	83 7d fc 00	 cmp	 DWORD PTR _Halt_Status$[ebp], 0
  0001b	74 02		 je	 SHORT $LN2@D
$HERE$4:
; Line 946
  0001d	eb fe		 jmp	 SHORT $HERE$4
$LN2@D:
; Line 947
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _Halt_Status$[ebp]
; Line 948
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_D	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Halt_Status$ = -8					; size = 4
_z$ = -4						; size = 4
_x$ = 8							; size = 4
_DD	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 928
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; Line 929
  00006	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _z$[ebp], eax
; Line 931
  0000c	b9 01 00 00 00	 mov	 ecx, 1
  00011	6b d1 00	 imul	 edx, ecx, 0
  00014	8b 45 fc	 mov	 eax, DWORD PTR _z$[ebp]
  00017	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  0001b	51		 push	 ecx
  0001c	68 00 00 00 00	 push	 OFFSET $SG10107
  00021	e8 00 00 00 00	 call	 _Output
  00026	83 c4 08	 add	 esp, 8
; Line 932
  00029	ba 01 00 00 00	 mov	 edx, 1
  0002e	c1 e2 00	 shl	 edx, 0
  00031	8b 45 fc	 mov	 eax, DWORD PTR _z$[ebp]
  00034	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00038	51		 push	 ecx
  00039	68 00 00 00 00	 push	 OFFSET $SG10108
  0003e	e8 00 00 00 00	 call	 _Output
  00043	83 c4 08	 add	 esp, 8
; Line 933
  00046	ba 01 00 00 00	 mov	 edx, 1
  0004b	d1 e2		 shl	 edx, 1
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _z$[ebp]
  00050	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00054	51		 push	 ecx
  00055	68 00 00 00 00	 push	 OFFSET $SG10109
  0005a	e8 00 00 00 00	 call	 _Output
  0005f	83 c4 08	 add	 esp, 8
; Line 934
  00062	ba 01 00 00 00	 mov	 edx, 1
  00067	6b c2 03	 imul	 eax, edx, 3
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _z$[ebp]
  0006d	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00071	52		 push	 edx
  00072	68 00 00 00 00	 push	 OFFSET $SG10110
  00077	e8 00 00 00 00	 call	 _Output
  0007c	83 c4 08	 add	 esp, 8
; Line 936
  0007f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00082	50		 push	 eax
  00083	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 _H
  0008c	83 c4 08	 add	 esp, 8
  0008f	89 45 f8	 mov	 DWORD PTR _Halt_Status$[ebp], eax
; Line 937
  00092	83 7d f8 00	 cmp	 DWORD PTR _Halt_Status$[ebp], 0
  00096	74 02		 je	 SHORT $LN2@DD
$HERE$4:
; Line 938
  00098	eb fe		 jmp	 SHORT $HERE$4
$LN2@DD:
; Line 939
  0009a	b8 01 00 00 00	 mov	 eax, 1
; Line 940
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_DD	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_E	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 923
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 924
  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _H
  00010	83 c4 08	 add	 esp, 8
; Line 925
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_E	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Halt_Status$ = -4					; size = 4
_x$ = 8							; size = 4
_P	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 915
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 916
  00004	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00007	50		 push	 eax
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 _H
  00011	83 c4 08	 add	 esp, 8
  00014	89 45 fc	 mov	 DWORD PTR _Halt_Status$[ebp], eax
; Line 917
  00017	83 7d fc 00	 cmp	 DWORD PTR _Halt_Status$[ebp], 0
  0001b	74 02		 je	 SHORT $LN1@P
$HERE$4:
; Line 918
  0001d	eb fe		 jmp	 SHORT $HERE$4
$LN1@P:
; Line 920
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_P	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Halt_Status$ = -4					; size = 4
_x$ = 8							; size = 4
_PP	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 907
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 908
  00004	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00007	50		 push	 eax
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 _HH
  00011	83 c4 08	 add	 esp, 8
  00014	89 45 fc	 mov	 DWORD PTR _Halt_Status$[ebp], eax
; Line 909
  00017	83 7d fc 00	 cmp	 DWORD PTR _Halt_Status$[ebp], 0
  0001b	74 02		 je	 SHORT $LN1@PP
$HERE$4:
; Line 910
  0001d	eb fe		 jmp	 SHORT $HERE$4
$LN1@PP:
; Line 912
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_PP	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_Kozen_N PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 900
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 901
  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _Kozen_K
  00010	83 c4 08	 add	 esp, 8
  00013	85 c0		 test	 eax, eax
  00015	74 02		 je	 SHORT $LN2@Kozen_N
$HERE$4:
; Line 902
  00017	eb fe		 jmp	 SHORT $HERE$4
$LN2@Kozen_N:
; Line 903
  00019	b8 01 00 00 00	 mov	 eax, 1
; Line 904
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
_Kozen_N ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Strachey_P PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 894
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L$4:
; Line 895
  00003	68 00 00 00 00	 push	 OFFSET _Strachey_P
  00008	e8 00 00 00 00	 call	 _T
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	74 02		 je	 SHORT $LN1@Strachey_P
  00014	eb ed		 jmp	 SHORT $L$4
$LN1@Strachey_P:
; Line 897
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_Strachey_P ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_M$ = 8							; size = 4
_Sipser_D PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 883
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 884
  00003	8b 45 08	 mov	 eax, DWORD PTR _M$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _M$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _Sipser_H
  00010	83 c4 08	 add	 esp, 8
  00013	85 c0		 test	 eax, eax
  00015	74 04		 je	 SHORT $LN2@Sipser_D
; Line 885
  00017	33 c0		 xor	 eax, eax
  00019	eb 05		 jmp	 SHORT $LN1@Sipser_D
$LN2@Sipser_D:
; Line 886
  0001b	b8 01 00 00 00	 mov	 eax, 1
$LN1@Sipser_D:
; Line 887
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_Sipser_D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_Px	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 861
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 862
  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _H
  00010	83 c4 08	 add	 esp, 8
; Line 864
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_Px	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_Pz	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 856
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 857
  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _Simulate
  00010	83 c4 08	 add	 esp, 8
; Line 858
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_Pz	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Halt_Status$ = -4					; size = 4
_x$ = 8							; size = 4
_Py	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 848
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 849
  00004	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00007	50		 push	 eax
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 _Simulate
  00011	83 c4 08	 add	 esp, 8
  00014	89 45 fc	 mov	 DWORD PTR _Halt_Status$[ebp], eax
; Line 850
  00017	83 7d fc 00	 cmp	 DWORD PTR _Halt_Status$[ebp], 0
  0001b	74 02		 je	 SHORT $LN1@Py
$HERE$4:
; Line 851
  0001d	eb fe		 jmp	 SHORT $HERE$4
$LN1@Py:
; Line 853
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_Py	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_Simulate PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 841
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 842
  00003	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00006	50		 push	 eax
  00007	ff 55 08	 call	 DWORD PTR _x$[ebp]
  0000a	83 c4 04	 add	 esp, 4
; Line 843
  0000d	b8 01 00 00 00	 mov	 eax, 1
; Line 844
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
_Simulate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_PR	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 824
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 825
  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _HR
  0000c	83 c4 04	 add	 esp, 4
; Line 826
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_PR	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_y$ = 8							; size = 4
_HR	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 829
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 830
  00003	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _PR
  0000c	83 c4 04	 add	 esp, 4
; Line 831
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_HR	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_Add3	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 817
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 818
  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	83 c0 03	 add	 eax, 3
; Line 819
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
_Add3	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Infinite_Loop3 PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 809
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L1$3:
; Line 810
  00003	eb 02		 jmp	 SHORT $L3$4
$L2$5:
; Line 811
  00005	eb 02		 jmp	 SHORT $L4$6
$L3$4:
; Line 812
  00007	eb fc		 jmp	 SHORT $L2$5
$L4$6:
; Line 814
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
_Infinite_Loop3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Infinite_Loop2 PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 803
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L1$3:
; Line 804
  00003	eb 02		 jmp	 SHORT $L3$4
$L2$5:
; Line 805
  00005	eb fc		 jmp	 SHORT $L1$3
$L3$4:
; Line 806
  00007	eb fc		 jmp	 SHORT $L2$5
; Line 807
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
_Infinite_Loop2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_Halts	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 798
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 799
  00003	33 c0		 xor	 eax, eax
; Line 800
  00005	5d		 pop	 ebp
  00006	c3		 ret	 0
_Halts	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -32						; size = 4
_code_end$ = -28					; size = 4
_master_state$ = -24					; size = 4
_End_Of_Code$ = -20					; size = 4
_execution_trace$ = -16					; size = 4
_slave_state$ = -12					; size = 4
_slave_stack$ = -8					; size = 4
_Address_of_T$ = -4					; size = 4
_P$ = 8							; size = 4
_T	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 771
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
; Line 772
  00006	68 00 00 00 00	 push	 OFFSET _T
  0000b	e8 00 00 00 00	 call	 _get_code_end
  00010	83 c4 04	 add	 esp, 4
  00013	89 45 ec	 mov	 DWORD PTR _End_Of_Code$[ebp], eax
; Line 773
  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Address_of_T$[ebp], OFFSET _T
; Line 774
  0001d	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _get_code_end
  00026	83 c4 04	 add	 esp, 4
  00029	89 45 e4	 mov	 DWORD PTR _code_end$[ebp], eax
; Line 775
  0002c	6a 18		 push	 24			; 00000018H
  0002e	e8 00 00 00 00	 call	 _Allocate
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 e0	 mov	 DWORD PTR _decoded$[ebp], eax
; Line 777
  00039	6a 34		 push	 52			; 00000034H
  0003b	e8 00 00 00 00	 call	 _Allocate
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 e8	 mov	 DWORD PTR _master_state$[ebp], eax
; Line 778
  00046	6a 34		 push	 52			; 00000034H
  00048	e8 00 00 00 00	 call	 _Allocate
  0004d	83 c4 04	 add	 esp, 4
  00050	89 45 f4	 mov	 DWORD PTR _slave_state$[ebp], eax
; Line 779
  00053	68 00 00 01 00	 push	 65536			; 00010000H
  00058	e8 00 00 00 00	 call	 _Allocate
  0005d	83 c4 04	 add	 esp, 4
  00060	89 45 f8	 mov	 DWORD PTR _slave_stack$[ebp], eax
; Line 780
  00063	68 c0 5d 00 00	 push	 24000			; 00005dc0H
  00068	e8 00 00 00 00	 call	 _Allocate
  0006d	83 c4 04	 add	 esp, 4
  00070	89 45 f0	 mov	 DWORD PTR _execution_trace$[ebp], eax
; Line 781
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _slave_stack$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 f4	 mov	 edx, DWORD PTR _slave_state$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 ec	 mov	 eax, DWORD PTR _End_Of_Code$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _P$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _Init_slave_state0
  00088	83 c4 10	 add	 esp, 16			; 00000010H
; Line 782
  0008b	8b 55 f0	 mov	 edx, DWORD PTR _execution_trace$[ebp]
  0008e	52		 push	 edx
  0008f	68 00 00 00 00	 push	 OFFSET $SG10008
  00094	e8 00 00 00 00	 call	 _Output
  00099	83 c4 08	 add	 esp, 8
; Line 783
  0009c	8b 45 fc	 mov	 eax, DWORD PTR _Address_of_T$[ebp]
  0009f	50		 push	 eax
  000a0	68 00 00 00 00	 push	 OFFSET $SG10009
  000a5	e8 00 00 00 00	 call	 _Output
  000aa	83 c4 08	 add	 esp, 8
; Line 784
  000ad	8b 4d 08	 mov	 ecx, DWORD PTR _P$[ebp]
  000b0	51		 push	 ecx
  000b1	8b 55 fc	 mov	 edx, DWORD PTR _Address_of_T$[ebp]
  000b4	52		 push	 edx
  000b5	8d 45 f8	 lea	 eax, DWORD PTR _slave_stack$[ebp]
  000b8	50		 push	 eax
  000b9	8d 4d f4	 lea	 ecx, DWORD PTR _slave_state$[ebp]
  000bc	51		 push	 ecx
  000bd	8d 55 e8	 lea	 edx, DWORD PTR _master_state$[ebp]
  000c0	52		 push	 edx
  000c1	8b 45 e4	 mov	 eax, DWORD PTR _code_end$[ebp]
  000c4	50		 push	 eax
  000c5	8d 4d e0	 lea	 ecx, DWORD PTR _decoded$[ebp]
  000c8	51		 push	 ecx
  000c9	8d 55 f0	 lea	 edx, DWORD PTR _execution_trace$[ebp]
  000cc	52		 push	 edx
  000cd	68 00 00 00 00	 push	 OFFSET $SG10011
  000d2	e8 00 00 00 00	 call	 _Decide_Halting0
  000d7	83 c4 24	 add	 esp, 36			; 00000024H
  000da	85 c0		 test	 eax, eax
  000dc	74 02		 je	 SHORT $LN2@T
; Line 786
  000de	eb 04		 jmp	 SHORT $END_OF_CODE$4
$LN2@T:
; Line 787
  000e0	33 c0		 xor	 eax, eax
  000e2	eb 12		 jmp	 SHORT $LN1@T
$END_OF_CODE$4:
; Line 789
  000e4	68 00 00 00 00	 push	 OFFSET $SG10012
  000e9	e8 00 00 00 00	 call	 _OutputString
  000ee	83 c4 04	 add	 esp, 4
; Line 790
  000f1	b8 01 00 00 00	 mov	 eax, 1
$LN1@T:
; Line 791
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
_T	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -32						; size = 4
_code_end$ = -28					; size = 4
_master_state$ = -24					; size = 4
_End_Of_Code$ = -20					; size = 4
_execution_trace$ = -16					; size = 4
_slave_state$ = -12					; size = 4
_slave_stack$ = -8					; size = 4
_Address_of_H0$ = -4					; size = 4
_P$ = 8							; size = 4
_H0	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 747
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
; Line 748
  00006	68 00 00 00 00	 push	 OFFSET _H0
  0000b	e8 00 00 00 00	 call	 _get_code_end
  00010	83 c4 04	 add	 esp, 4
  00013	89 45 ec	 mov	 DWORD PTR _End_Of_Code$[ebp], eax
; Line 749
  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Address_of_H0$[ebp], OFFSET _H0
; Line 750
  0001d	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _get_code_end
  00026	83 c4 04	 add	 esp, 4
  00029	89 45 e4	 mov	 DWORD PTR _code_end$[ebp], eax
; Line 751
  0002c	6a 18		 push	 24			; 00000018H
  0002e	e8 00 00 00 00	 call	 _Allocate
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 e0	 mov	 DWORD PTR _decoded$[ebp], eax
; Line 753
  00039	6a 34		 push	 52			; 00000034H
  0003b	e8 00 00 00 00	 call	 _Allocate
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 e8	 mov	 DWORD PTR _master_state$[ebp], eax
; Line 754
  00046	6a 34		 push	 52			; 00000034H
  00048	e8 00 00 00 00	 call	 _Allocate
  0004d	83 c4 04	 add	 esp, 4
  00050	89 45 f4	 mov	 DWORD PTR _slave_state$[ebp], eax
; Line 755
  00053	68 00 00 01 00	 push	 65536			; 00010000H
  00058	e8 00 00 00 00	 call	 _Allocate
  0005d	83 c4 04	 add	 esp, 4
  00060	89 45 f8	 mov	 DWORD PTR _slave_stack$[ebp], eax
; Line 756
  00063	68 c0 5d 00 00	 push	 24000			; 00005dc0H
  00068	e8 00 00 00 00	 call	 _Allocate
  0006d	83 c4 04	 add	 esp, 4
  00070	89 45 f0	 mov	 DWORD PTR _execution_trace$[ebp], eax
; Line 757
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _slave_stack$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 f4	 mov	 edx, DWORD PTR _slave_state$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 ec	 mov	 eax, DWORD PTR _End_Of_Code$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _P$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _Init_slave_state0
  00088	83 c4 10	 add	 esp, 16			; 00000010H
; Line 758
  0008b	8b 55 f0	 mov	 edx, DWORD PTR _execution_trace$[ebp]
  0008e	52		 push	 edx
  0008f	68 00 00 00 00	 push	 OFFSET $SG9977
  00094	e8 00 00 00 00	 call	 _Output
  00099	83 c4 08	 add	 esp, 8
; Line 759
  0009c	8b 45 fc	 mov	 eax, DWORD PTR _Address_of_H0$[ebp]
  0009f	50		 push	 eax
  000a0	68 00 00 00 00	 push	 OFFSET $SG9978
  000a5	e8 00 00 00 00	 call	 _Output
  000aa	83 c4 08	 add	 esp, 8
; Line 760
  000ad	8b 4d 08	 mov	 ecx, DWORD PTR _P$[ebp]
  000b0	51		 push	 ecx
  000b1	8b 55 fc	 mov	 edx, DWORD PTR _Address_of_H0$[ebp]
  000b4	52		 push	 edx
  000b5	8d 45 f8	 lea	 eax, DWORD PTR _slave_stack$[ebp]
  000b8	50		 push	 eax
  000b9	8d 4d f4	 lea	 ecx, DWORD PTR _slave_state$[ebp]
  000bc	51		 push	 ecx
  000bd	8d 55 e8	 lea	 edx, DWORD PTR _master_state$[ebp]
  000c0	52		 push	 edx
  000c1	8b 45 e4	 mov	 eax, DWORD PTR _code_end$[ebp]
  000c4	50		 push	 eax
  000c5	8d 4d e0	 lea	 ecx, DWORD PTR _decoded$[ebp]
  000c8	51		 push	 ecx
  000c9	8d 55 f0	 lea	 edx, DWORD PTR _execution_trace$[ebp]
  000cc	52		 push	 edx
  000cd	68 00 00 00 00	 push	 OFFSET $SG9980
  000d2	e8 00 00 00 00	 call	 _Decide_Halting0
  000d7	83 c4 24	 add	 esp, 36			; 00000024H
  000da	85 c0		 test	 eax, eax
  000dc	74 02		 je	 SHORT $LN2@H0
; Line 762
  000de	eb 04		 jmp	 SHORT $END_OF_CODE$4
$LN2@H0:
; Line 763
  000e0	33 c0		 xor	 eax, eax
  000e2	eb 12		 jmp	 SHORT $LN1@H0
$END_OF_CODE$4:
; Line 765
  000e4	68 00 00 00 00	 push	 OFFSET $SG9981
  000e9	e8 00 00 00 00	 call	 _OutputString
  000ee	83 c4 04	 add	 esp, 4
; Line 766
  000f1	b8 01 00 00 00	 mov	 eax, 1
$LN1@H0:
; Line 767
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
_H0	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -32						; size = 4
_code_end$ = -28					; size = 4
_master_state$ = -24					; size = 4
_End_Of_Code$ = -20					; size = 4
_execution_trace$ = -16					; size = 4
_slave_state$ = -12					; size = 4
_slave_stack$ = -8					; size = 4
_Address_of_Kozen_K$ = -4				; size = 4
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_Kozen_K PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 721
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
; Line 722
  00006	68 00 00 00 00	 push	 OFFSET _H
  0000b	e8 00 00 00 00	 call	 _get_code_end
  00010	83 c4 04	 add	 esp, 4
  00013	89 45 ec	 mov	 DWORD PTR _End_Of_Code$[ebp], eax
; Line 723
  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Address_of_Kozen_K$[ebp], OFFSET _Kozen_K
; Line 724
  0001d	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _get_code_end
  00026	83 c4 04	 add	 esp, 4
  00029	89 45 e4	 mov	 DWORD PTR _code_end$[ebp], eax
; Line 725
  0002c	6a 18		 push	 24			; 00000018H
  0002e	e8 00 00 00 00	 call	 _Allocate
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 e0	 mov	 DWORD PTR _decoded$[ebp], eax
; Line 727
  00039	6a 34		 push	 52			; 00000034H
  0003b	e8 00 00 00 00	 call	 _Allocate
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 e8	 mov	 DWORD PTR _master_state$[ebp], eax
; Line 728
  00046	6a 34		 push	 52			; 00000034H
  00048	e8 00 00 00 00	 call	 _Allocate
  0004d	83 c4 04	 add	 esp, 4
  00050	89 45 f4	 mov	 DWORD PTR _slave_state$[ebp], eax
; Line 729
  00053	68 00 00 01 00	 push	 65536			; 00010000H
  00058	e8 00 00 00 00	 call	 _Allocate
  0005d	83 c4 04	 add	 esp, 4
  00060	89 45 f8	 mov	 DWORD PTR _slave_stack$[ebp], eax
; Line 730
  00063	68 80 a9 03 00	 push	 240000			; 0003a980H
  00068	e8 00 00 00 00	 call	 _Allocate
  0006d	83 c4 04	 add	 esp, 4
  00070	89 45 f0	 mov	 DWORD PTR _execution_trace$[ebp], eax
; Line 733
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _slave_stack$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 f4	 mov	 edx, DWORD PTR _slave_state$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 ec	 mov	 eax, DWORD PTR _End_Of_Code$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR _I$[ebp]
  00082	51		 push	 ecx
  00083	8b 55 08	 mov	 edx, DWORD PTR _P$[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 _Init_slave_state
  0008c	83 c4 14	 add	 esp, 20			; 00000014H
; Line 734
  0008f	8b 45 f0	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET $SG9946
  00098	e8 00 00 00 00	 call	 _Output
  0009d	83 c4 08	 add	 esp, 8
; Line 735
  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _Address_of_Kozen_K$[ebp]
  000a3	51		 push	 ecx
  000a4	68 00 00 00 00	 push	 OFFSET $SG9947
  000a9	e8 00 00 00 00	 call	 _Output
  000ae	83 c4 08	 add	 esp, 8
; Line 736
  000b1	8b 55 0c	 mov	 edx, DWORD PTR _I$[ebp]
  000b4	52		 push	 edx
  000b5	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _Address_of_Kozen_K$[ebp]
  000bc	51		 push	 ecx
  000bd	8d 55 f8	 lea	 edx, DWORD PTR _slave_stack$[ebp]
  000c0	52		 push	 edx
  000c1	8d 45 f4	 lea	 eax, DWORD PTR _slave_state$[ebp]
  000c4	50		 push	 eax
  000c5	8d 4d e8	 lea	 ecx, DWORD PTR _master_state$[ebp]
  000c8	51		 push	 ecx
  000c9	8b 55 e4	 mov	 edx, DWORD PTR _code_end$[ebp]
  000cc	52		 push	 edx
  000cd	8d 45 e0	 lea	 eax, DWORD PTR _decoded$[ebp]
  000d0	50		 push	 eax
  000d1	8d 4d f0	 lea	 ecx, DWORD PTR _execution_trace$[ebp]
  000d4	51		 push	 ecx
  000d5	68 00 00 00 00	 push	 OFFSET $SG9949
  000da	e8 00 00 00 00	 call	 _Decide_Halting
  000df	83 c4 28	 add	 esp, 40			; 00000028H
  000e2	85 c0		 test	 eax, eax
  000e4	74 14		 je	 SHORT $LN2@Kozen_K
; Line 739
  000e6	68 00 00 00 00	 push	 OFFSET $SG9950
  000eb	e8 00 00 00 00	 call	 _OutputString
  000f0	83 c4 04	 add	 esp, 4
; Line 740
  000f3	b8 01 00 00 00	 mov	 eax, 1
  000f8	eb 02		 jmp	 SHORT $LN1@Kozen_K
$LN2@Kozen_K:
; Line 742
  000fa	33 c0		 xor	 eax, eax
$LN1@Kozen_K:
; Line 743
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
_Kozen_K ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -32						; size = 4
_code_end$ = -28					; size = 4
_master_state$ = -24					; size = 4
_End_Of_Code$ = -20					; size = 4
_execution_trace$ = -16					; size = 4
_slave_state$ = -12					; size = 4
_slave_stack$ = -8					; size = 4
_Address_of_Sipser_H$ = -4				; size = 4
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_Sipser_H PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 695
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
; Line 696
  00006	68 00 00 00 00	 push	 OFFSET _H
  0000b	e8 00 00 00 00	 call	 _get_code_end
  00010	83 c4 04	 add	 esp, 4
  00013	89 45 ec	 mov	 DWORD PTR _End_Of_Code$[ebp], eax
; Line 697
  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Address_of_Sipser_H$[ebp], OFFSET _Sipser_H
; Line 698
  0001d	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _get_code_end
  00026	83 c4 04	 add	 esp, 4
  00029	89 45 e4	 mov	 DWORD PTR _code_end$[ebp], eax
; Line 699
  0002c	6a 18		 push	 24			; 00000018H
  0002e	e8 00 00 00 00	 call	 _Allocate
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 e0	 mov	 DWORD PTR _decoded$[ebp], eax
; Line 701
  00039	6a 34		 push	 52			; 00000034H
  0003b	e8 00 00 00 00	 call	 _Allocate
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 e8	 mov	 DWORD PTR _master_state$[ebp], eax
; Line 702
  00046	6a 34		 push	 52			; 00000034H
  00048	e8 00 00 00 00	 call	 _Allocate
  0004d	83 c4 04	 add	 esp, 4
  00050	89 45 f4	 mov	 DWORD PTR _slave_state$[ebp], eax
; Line 703
  00053	68 00 00 01 00	 push	 65536			; 00010000H
  00058	e8 00 00 00 00	 call	 _Allocate
  0005d	83 c4 04	 add	 esp, 4
  00060	89 45 f8	 mov	 DWORD PTR _slave_stack$[ebp], eax
; Line 704
  00063	68 80 a9 03 00	 push	 240000			; 0003a980H
  00068	e8 00 00 00 00	 call	 _Allocate
  0006d	83 c4 04	 add	 esp, 4
  00070	89 45 f0	 mov	 DWORD PTR _execution_trace$[ebp], eax
; Line 707
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _slave_stack$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 f4	 mov	 edx, DWORD PTR _slave_state$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 ec	 mov	 eax, DWORD PTR _End_Of_Code$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR _I$[ebp]
  00082	51		 push	 ecx
  00083	8b 55 08	 mov	 edx, DWORD PTR _P$[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 _Init_slave_state
  0008c	83 c4 14	 add	 esp, 20			; 00000014H
; Line 708
  0008f	8b 45 f0	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET $SG9908
  00098	e8 00 00 00 00	 call	 _Output
  0009d	83 c4 08	 add	 esp, 8
; Line 709
  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _Address_of_Sipser_H$[ebp]
  000a3	51		 push	 ecx
  000a4	68 00 00 00 00	 push	 OFFSET $SG9909
  000a9	e8 00 00 00 00	 call	 _Output
  000ae	83 c4 08	 add	 esp, 8
; Line 710
  000b1	8b 55 0c	 mov	 edx, DWORD PTR _I$[ebp]
  000b4	52		 push	 edx
  000b5	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _Address_of_Sipser_H$[ebp]
  000bc	51		 push	 ecx
  000bd	8d 55 f8	 lea	 edx, DWORD PTR _slave_stack$[ebp]
  000c0	52		 push	 edx
  000c1	8d 45 f4	 lea	 eax, DWORD PTR _slave_state$[ebp]
  000c4	50		 push	 eax
  000c5	8d 4d e8	 lea	 ecx, DWORD PTR _master_state$[ebp]
  000c8	51		 push	 ecx
  000c9	8b 55 e4	 mov	 edx, DWORD PTR _code_end$[ebp]
  000cc	52		 push	 edx
  000cd	8d 45 e0	 lea	 eax, DWORD PTR _decoded$[ebp]
  000d0	50		 push	 eax
  000d1	8d 4d f0	 lea	 ecx, DWORD PTR _execution_trace$[ebp]
  000d4	51		 push	 ecx
  000d5	68 00 00 00 00	 push	 OFFSET $SG9911
  000da	e8 00 00 00 00	 call	 _Decide_Halting
  000df	83 c4 28	 add	 esp, 40			; 00000028H
  000e2	85 c0		 test	 eax, eax
  000e4	74 14		 je	 SHORT $LN2@Sipser_H
; Line 713
  000e6	68 00 00 00 00	 push	 OFFSET $SG9912
  000eb	e8 00 00 00 00	 call	 _OutputString
  000f0	83 c4 04	 add	 esp, 4
; Line 714
  000f3	b8 01 00 00 00	 mov	 eax, 1
  000f8	eb 02		 jmp	 SHORT $LN1@Sipser_H
$LN2@Sipser_H:
; Line 716
  000fa	33 c0		 xor	 eax, eax
$LN1@Sipser_H:
; Line 717
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
_Sipser_H ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -32						; size = 4
_code_end$ = -28					; size = 4
_master_state$ = -24					; size = 4
_End_Of_Code$ = -20					; size = 4
_execution_trace$ = -16					; size = 4
_slave_state$ = -12					; size = 4
_slave_stack$ = -8					; size = 4
_Address_of_H$ = -4					; size = 4
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_H	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 669
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
; Line 670
  00006	68 00 00 00 00	 push	 OFFSET _H
  0000b	e8 00 00 00 00	 call	 _get_code_end
  00010	83 c4 04	 add	 esp, 4
  00013	89 45 ec	 mov	 DWORD PTR _End_Of_Code$[ebp], eax
; Line 671
  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Address_of_H$[ebp], OFFSET _H
; Line 672
  0001d	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _get_code_end
  00026	83 c4 04	 add	 esp, 4
  00029	89 45 e4	 mov	 DWORD PTR _code_end$[ebp], eax
; Line 673
  0002c	6a 18		 push	 24			; 00000018H
  0002e	e8 00 00 00 00	 call	 _Allocate
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 e0	 mov	 DWORD PTR _decoded$[ebp], eax
; Line 675
  00039	6a 34		 push	 52			; 00000034H
  0003b	e8 00 00 00 00	 call	 _Allocate
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 e8	 mov	 DWORD PTR _master_state$[ebp], eax
; Line 676
  00046	6a 34		 push	 52			; 00000034H
  00048	e8 00 00 00 00	 call	 _Allocate
  0004d	83 c4 04	 add	 esp, 4
  00050	89 45 f4	 mov	 DWORD PTR _slave_state$[ebp], eax
; Line 677
  00053	68 00 00 01 00	 push	 65536			; 00010000H
  00058	e8 00 00 00 00	 call	 _Allocate
  0005d	83 c4 04	 add	 esp, 4
  00060	89 45 f8	 mov	 DWORD PTR _slave_stack$[ebp], eax
; Line 678
  00063	68 80 a9 03 00	 push	 240000			; 0003a980H
  00068	e8 00 00 00 00	 call	 _Allocate
  0006d	83 c4 04	 add	 esp, 4
  00070	89 45 f0	 mov	 DWORD PTR _execution_trace$[ebp], eax
; Line 681
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _slave_stack$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 f4	 mov	 edx, DWORD PTR _slave_state$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 ec	 mov	 eax, DWORD PTR _End_Of_Code$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR _I$[ebp]
  00082	51		 push	 ecx
  00083	8b 55 08	 mov	 edx, DWORD PTR _P$[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 _Init_slave_state
  0008c	83 c4 14	 add	 esp, 20			; 00000014H
; Line 682
  0008f	8b 45 f0	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET $SG9870
  00098	e8 00 00 00 00	 call	 _Output
  0009d	83 c4 08	 add	 esp, 8
; Line 683
  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _Address_of_H$[ebp]
  000a3	51		 push	 ecx
  000a4	68 00 00 00 00	 push	 OFFSET $SG9871
  000a9	e8 00 00 00 00	 call	 _Output
  000ae	83 c4 08	 add	 esp, 8
; Line 684
  000b1	8b 55 0c	 mov	 edx, DWORD PTR _I$[ebp]
  000b4	52		 push	 edx
  000b5	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _Address_of_H$[ebp]
  000bc	51		 push	 ecx
  000bd	8d 55 f8	 lea	 edx, DWORD PTR _slave_stack$[ebp]
  000c0	52		 push	 edx
  000c1	8d 45 f4	 lea	 eax, DWORD PTR _slave_state$[ebp]
  000c4	50		 push	 eax
  000c5	8d 4d e8	 lea	 ecx, DWORD PTR _master_state$[ebp]
  000c8	51		 push	 ecx
  000c9	8b 55 e4	 mov	 edx, DWORD PTR _code_end$[ebp]
  000cc	52		 push	 edx
  000cd	8d 45 e0	 lea	 eax, DWORD PTR _decoded$[ebp]
  000d0	50		 push	 eax
  000d1	8d 4d f0	 lea	 ecx, DWORD PTR _execution_trace$[ebp]
  000d4	51		 push	 ecx
  000d5	68 00 00 00 00	 push	 OFFSET $SG9873
  000da	e8 00 00 00 00	 call	 _Decide_Halting
  000df	83 c4 28	 add	 esp, 40			; 00000028H
  000e2	85 c0		 test	 eax, eax
  000e4	74 14		 je	 SHORT $LN2@H
; Line 687
  000e6	68 00 00 00 00	 push	 OFFSET $SG9874
  000eb	e8 00 00 00 00	 call	 _OutputString
  000f0	83 c4 04	 add	 esp, 4
; Line 688
  000f3	b8 01 00 00 00	 mov	 eax, 1
  000f8	eb 02		 jmp	 SHORT $LN1@H
$LN2@H:
; Line 690
  000fa	33 c0		 xor	 eax, eax
$LN1@H:
; Line 691
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
_H	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -32						; size = 4
_code_end$ = -28					; size = 4
_master_state$ = -24					; size = 4
_End_Of_Code$ = -20					; size = 4
_execution_trace$ = -16					; size = 4
_slave_state$ = -12					; size = 4
_slave_stack$ = -8					; size = 4
_Address_of_H1$ = -4					; size = 4
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_H1	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 636
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
; Line 637
  00006	68 00 00 00 00	 push	 OFFSET _H1
  0000b	e8 00 00 00 00	 call	 _get_code_end
  00010	83 c4 04	 add	 esp, 4
  00013	89 45 ec	 mov	 DWORD PTR _End_Of_Code$[ebp], eax
; Line 638
  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Address_of_H1$[ebp], OFFSET _H1
; Line 639
  0001d	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _get_code_end
  00026	83 c4 04	 add	 esp, 4
  00029	89 45 e4	 mov	 DWORD PTR _code_end$[ebp], eax
; Line 640
  0002c	6a 18		 push	 24			; 00000018H
  0002e	e8 00 00 00 00	 call	 _Allocate
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 e0	 mov	 DWORD PTR _decoded$[ebp], eax
; Line 642
  00039	6a 34		 push	 52			; 00000034H
  0003b	e8 00 00 00 00	 call	 _Allocate
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 e8	 mov	 DWORD PTR _master_state$[ebp], eax
; Line 643
  00046	6a 34		 push	 52			; 00000034H
  00048	e8 00 00 00 00	 call	 _Allocate
  0004d	83 c4 04	 add	 esp, 4
  00050	89 45 f4	 mov	 DWORD PTR _slave_state$[ebp], eax
; Line 644
  00053	68 00 00 01 00	 push	 65536			; 00010000H
  00058	e8 00 00 00 00	 call	 _Allocate
  0005d	83 c4 04	 add	 esp, 4
  00060	89 45 f8	 mov	 DWORD PTR _slave_stack$[ebp], eax
; Line 645
  00063	68 80 a9 03 00	 push	 240000			; 0003a980H
  00068	e8 00 00 00 00	 call	 _Allocate
  0006d	83 c4 04	 add	 esp, 4
  00070	89 45 f0	 mov	 DWORD PTR _execution_trace$[ebp], eax
; Line 647
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _slave_stack$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 f4	 mov	 edx, DWORD PTR _slave_state$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 ec	 mov	 eax, DWORD PTR _End_Of_Code$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR _I$[ebp]
  00082	51		 push	 ecx
  00083	8b 55 08	 mov	 edx, DWORD PTR _P$[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 _Init_slave_state
  0008c	83 c4 14	 add	 esp, 20			; 00000014H
; Line 648
  0008f	8b 45 f0	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET $SG9832
  00098	e8 00 00 00 00	 call	 _Output
  0009d	83 c4 08	 add	 esp, 8
; Line 649
  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _Address_of_H1$[ebp]
  000a3	51		 push	 ecx
  000a4	68 00 00 00 00	 push	 OFFSET $SG9833
  000a9	e8 00 00 00 00	 call	 _Output
  000ae	83 c4 08	 add	 esp, 8
; Line 650
  000b1	8b 55 0c	 mov	 edx, DWORD PTR _I$[ebp]
  000b4	52		 push	 edx
  000b5	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _Address_of_H1$[ebp]
  000bc	51		 push	 ecx
  000bd	8d 55 f8	 lea	 edx, DWORD PTR _slave_stack$[ebp]
  000c0	52		 push	 edx
  000c1	8d 45 f4	 lea	 eax, DWORD PTR _slave_state$[ebp]
  000c4	50		 push	 eax
  000c5	8d 4d e8	 lea	 ecx, DWORD PTR _master_state$[ebp]
  000c8	51		 push	 ecx
  000c9	8b 55 e4	 mov	 edx, DWORD PTR _code_end$[ebp]
  000cc	52		 push	 edx
  000cd	8d 45 e0	 lea	 eax, DWORD PTR _decoded$[ebp]
  000d0	50		 push	 eax
  000d1	8d 4d f0	 lea	 ecx, DWORD PTR _execution_trace$[ebp]
  000d4	51		 push	 ecx
  000d5	68 00 00 00 00	 push	 OFFSET $SG9835
  000da	e8 00 00 00 00	 call	 _Decide_Halting
  000df	83 c4 28	 add	 esp, 40			; 00000028H
  000e2	85 c0		 test	 eax, eax
  000e4	74 14		 je	 SHORT $LN2@H1
; Line 653
  000e6	68 00 00 00 00	 push	 OFFSET $SG9836
  000eb	e8 00 00 00 00	 call	 _OutputString
  000f0	83 c4 04	 add	 esp, 4
; Line 654
  000f3	b8 01 00 00 00	 mov	 eax, 1
  000f8	eb 02		 jmp	 SHORT $LN1@H1
$LN2@H1:
; Line 656
  000fa	33 c0		 xor	 eax, eax
$LN1@H1:
; Line 657
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
_H1	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -36						; size = 4
_code_end$ = -32					; size = 4
_master_state$ = -28					; size = 4
_Root$ = -24						; size = 4
_End_Of_Code$ = -20					; size = 4
_slave_state$ = -16					; size = 4
_slave_stack$ = -12					; size = 4
_execution_trace$ = -8					; size = 4
_Aborted$ = -4						; size = 4
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_HH	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 556
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
; Line 560
  00006	eb 08		 jmp	 SHORT $SKIP$4
$DATA1$5:
; Line 564
  00008	90		 npad	 1
  00009	90		 npad	 1
  0000a	90		 npad	 1
  0000b	90		 npad	 1
$DATA2$6:
; Line 577
  0000c	90		 npad	 1
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	90		 npad	 1
$SKIP$4:
; Line 590
  00010	8d 05 00 00 00
	00		 lea	 eax, OFFSET $DATA1$5
  00016	89 45 fc	 mov	 DWORD PTR _Aborted$[ebp], eax
  00019	8d 05 00 00 00
	00		 lea	 eax, OFFSET $DATA2$6
  0001f	89 45 f8	 mov	 DWORD PTR _execution_trace$[ebp], eax
  00022	b8 00 00 00 00	 mov	 eax, OFFSET $END_OF_CODE$7
  00027	89 45 ec	 mov	 DWORD PTR _End_Of_Code$[ebp], eax
; Line 611
  0002a	8d 45 f4	 lea	 eax, DWORD PTR _slave_stack$[ebp]
  0002d	50		 push	 eax
  0002e	8d 4d f0	 lea	 ecx, DWORD PTR _slave_state$[ebp]
  00031	51		 push	 ecx
  00032	8d 55 e4	 lea	 edx, DWORD PTR _master_state$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  00039	50		 push	 eax
  0003a	8d 4d e0	 lea	 ecx, DWORD PTR _code_end$[ebp]
  0003d	51		 push	 ecx
  0003e	8d 55 dc	 lea	 edx, DWORD PTR _decoded$[ebp]
  00041	52		 push	 edx
  00042	8d 45 f8	 lea	 eax, DWORD PTR _execution_trace$[ebp]
  00045	50		 push	 eax
  00046	8d 4d fc	 lea	 ecx, DWORD PTR _Aborted$[ebp]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 _Init_Halts_HH
  0004f	83 c4 20	 add	 esp, 32			; 00000020H
  00052	89 45 e8	 mov	 DWORD PTR _Root$[ebp], eax
; Line 615
  00055	8b 55 f4	 mov	 edx, DWORD PTR _slave_stack$[ebp]
  00058	52		 push	 edx
  00059	8b 45 f0	 mov	 eax, DWORD PTR _slave_state$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d ec	 mov	 ecx, DWORD PTR _End_Of_Code$[ebp]
  00060	51		 push	 ecx
  00061	8b 55 0c	 mov	 edx, DWORD PTR _I$[ebp]
  00064	52		 push	 edx
  00065	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _Init_slave_state
  0006e	83 c4 14	 add	 esp, 20			; 00000014H
; Line 617
  00071	8b 4d e8	 mov	 ecx, DWORD PTR _Root$[ebp]
  00074	51		 push	 ecx
  00075	8d 55 f4	 lea	 edx, DWORD PTR _slave_stack$[ebp]
  00078	52		 push	 edx
  00079	8d 45 f0	 lea	 eax, DWORD PTR _slave_state$[ebp]
  0007c	50		 push	 eax
  0007d	8d 4d e4	 lea	 ecx, DWORD PTR _master_state$[ebp]
  00080	51		 push	 ecx
  00081	8b 55 ec	 mov	 edx, DWORD PTR _End_Of_Code$[ebp]
  00084	52		 push	 edx
  00085	8b 45 e0	 mov	 eax, DWORD PTR _code_end$[ebp]
  00088	50		 push	 eax
  00089	8d 4d dc	 lea	 ecx, DWORD PTR _decoded$[ebp]
  0008c	51		 push	 ecx
  0008d	8d 55 f8	 lea	 edx, DWORD PTR _execution_trace$[ebp]
  00090	52		 push	 edx
  00091	8d 45 fc	 lea	 eax, DWORD PTR _Aborted$[ebp]
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _Decide_Halting_HH
  0009a	83 c4 24	 add	 esp, 36			; 00000024H
  0009d	85 c0		 test	 eax, eax
  0009f	74 02		 je	 SHORT $LN2@HH
; Line 620
  000a1	eb 16		 jmp	 SHORT $END_OF_CODE$7
$LN2@HH:
; Line 622
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _Aborted$[ebp]
  000a6	c7 01 90 90 90
	90		 mov	 DWORD PTR [ecx], -1869574000 ; 90909090H
; Line 623
  000ac	8b 55 f8	 mov	 edx, DWORD PTR _execution_trace$[ebp]
  000af	c7 02 90 90 90
	90		 mov	 DWORD PTR [edx], -1869574000 ; 90909090H
; Line 624
  000b5	33 c0		 xor	 eax, eax
  000b7	eb 17		 jmp	 SHORT $LN1@HH
$END_OF_CODE$7:
; Line 627
  000b9	8b 45 fc	 mov	 eax, DWORD PTR _Aborted$[ebp]
  000bc	c7 00 90 90 90
	90		 mov	 DWORD PTR [eax], -1869574000 ; 90909090H
; Line 628
  000c2	8b 4d f8	 mov	 ecx, DWORD PTR _execution_trace$[ebp]
  000c5	c7 01 90 90 90
	90		 mov	 DWORD PTR [ecx], -1869574000 ; 90909090H
; Line 629
  000cb	b8 01 00 00 00	 mov	 eax, 1
$LN1@HH:
; Line 630
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
_HH	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Aborted$ = 8						; size = 4
_execution_trace$ = 12					; size = 4
_decoded$ = 16						; size = 4
_code_end$ = 20						; size = 4
_P$ = 24						; size = 4
_master_state$ = 28					; size = 4
_slave_state$ = 32					; size = 4
_slave_stack$ = 36					; size = 4
_Init_Halts_HH PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 529
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 530
  00003	6a 18		 push	 24			; 00000018H
  00005	e8 00 00 00 00	 call	 _Allocate
  0000a	83 c4 04	 add	 esp, 4
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _decoded$[ebp]
  00010	89 01		 mov	 DWORD PTR [ecx], eax
; Line 531
  00012	8b 55 18	 mov	 edx, DWORD PTR _P$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 _get_code_end
  0001b	83 c4 04	 add	 esp, 4
  0001e	8b 4d 14	 mov	 ecx, DWORD PTR _code_end$[ebp]
  00021	89 01		 mov	 DWORD PTR [ecx], eax
; Line 532
  00023	6a 34		 push	 52			; 00000034H
  00025	e8 00 00 00 00	 call	 _Allocate
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 55 1c	 mov	 edx, DWORD PTR _master_state$[ebp]
  00030	89 02		 mov	 DWORD PTR [edx], eax
; Line 533
  00032	6a 34		 push	 52			; 00000034H
  00034	e8 00 00 00 00	 call	 _Allocate
  00039	83 c4 04	 add	 esp, 4
  0003c	8b 4d 20	 mov	 ecx, DWORD PTR _slave_state$[ebp]
  0003f	89 01		 mov	 DWORD PTR [ecx], eax
; Line 534
  00041	68 00 00 01 00	 push	 65536			; 00010000H
  00046	e8 00 00 00 00	 call	 _Allocate
  0004b	83 c4 04	 add	 esp, 4
  0004e	8b 55 24	 mov	 edx, DWORD PTR _slave_stack$[ebp]
  00051	89 02		 mov	 DWORD PTR [edx], eax
; Line 535
  00053	8b 45 24	 mov	 eax, DWORD PTR _slave_stack$[ebp]
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	51		 push	 ecx
  00059	68 00 00 00 00	 push	 OFFSET $SG9773
  0005e	e8 00 00 00 00	 call	 _Output
  00063	83 c4 08	 add	 esp, 8
; Line 536
  00066	8b 55 0c	 mov	 edx, DWORD PTR _execution_trace$[ebp]
  00069	8b 02		 mov	 eax, DWORD PTR [edx]
  0006b	81 38 90 90 90
	90		 cmp	 DWORD PTR [eax], -1869574000 ; 90909090H
  00071	75 3b		 jne	 SHORT $LN2@Init_Halts
; Line 539
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _Aborted$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
; Line 540
  0007e	68 80 a9 03 00	 push	 240000			; 0003a980H
  00083	e8 00 00 00 00	 call	 _Allocate
  00088	83 c4 04	 add	 esp, 4
  0008b	8b 4d 0c	 mov	 ecx, DWORD PTR _execution_trace$[ebp]
  0008e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00090	89 02		 mov	 DWORD PTR [edx], eax
; Line 541
  00092	8b 45 0c	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	8b 11		 mov	 edx, DWORD PTR [ecx]
  00099	52		 push	 edx
  0009a	68 00 00 00 00	 push	 OFFSET $SG9775
  0009f	e8 00 00 00 00	 call	 _Output
  000a4	83 c4 08	 add	 esp, 8
; Line 543
  000a7	b8 01 00 00 00	 mov	 eax, 1
  000ac	eb 02		 jmp	 SHORT $LN1@Init_Halts
$LN2@Init_Halts:
; Line 545
  000ae	33 c0		 xor	 eax, eax
$LN1@Init_Halts:
; Line 546
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
_Init_Halts_HH ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_address$1 = -16					; size = 4
_Current_Length_Of_Execution_Trace$ = -12		; size = 4
_size$2 = -8						; size = 4
_EIP$3 = -4						; size = 4
_Aborted$ = 8						; size = 4
_execution_trace$ = 12					; size = 4
_decoded$ = 16						; size = 4
_code_end$ = 20						; size = 4
_End_Of_Code$ = 24					; size = 4
_master_state$ = 28					; size = 4
_slave_state$ = 32					; size = 4
_slave_stack$ = 36					; size = 4
_Root$ = 40						; size = 4
_Decide_Halting_HH PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 483
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; Line 484
  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _Current_Length_Of_Execution_Trace$[ebp], 0
$LN2@Decide_Hal:
; Line 485
  0000d	8b 45 08	 mov	 eax, DWORD PTR _Aborted$[ebp]
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00015	0f 85 98 00 00
	00		 jne	 $LN3@Decide_Hal
; Line 487
  0001b	8b 55 20	 mov	 edx, DWORD PTR _slave_state$[ebp]
  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	89 4d fc	 mov	 DWORD PTR _EIP$3[ebp], ecx
; Line 488
  00025	8b 55 10	 mov	 edx, DWORD PTR _decoded$[ebp]
  00028	8b 02		 mov	 eax, DWORD PTR [edx]
  0002a	50		 push	 eax
  0002b	8b 4d 20	 mov	 ecx, DWORD PTR _slave_state$[ebp]
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	52		 push	 edx
  00031	8b 45 1c	 mov	 eax, DWORD PTR _master_state$[ebp]
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 _DebugStep
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 492
  0003f	e8 00 00 00 00	 call	 _Last_Address_Of_Operating_System
  00044	39 45 fc	 cmp	 DWORD PTR _EIP$3[ebp], eax
  00047	76 18		 jbe	 SHORT $LN4@Decide_Hal
; Line 494
  00049	6a 18		 push	 24			; 00000018H
  0004b	8b 55 10	 mov	 edx, DWORD PTR _decoded$[ebp]
  0004e	8b 02		 mov	 eax, DWORD PTR [edx]
  00050	50		 push	 eax
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _execution_trace$[ebp]
  00054	8b 11		 mov	 edx, DWORD PTR [ecx]
  00056	8b 02		 mov	 eax, DWORD PTR [edx]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 _PushBack
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Decide_Hal:
; Line 498
  00061	8b 4d fc	 mov	 ecx, DWORD PTR _EIP$3[ebp]
  00064	3b 4d 14	 cmp	 ecx, DWORD PTR _code_end$[ebp]
  00067	75 07		 jne	 SHORT $LN5@Decide_Hal
; Line 499
  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	eb 56		 jmp	 SHORT $LN1@Decide_Hal
$LN5@Decide_Hal:
; Line 501
  00070	83 7d 28 00	 cmp	 DWORD PTR _Root$[ebp], 0
  00074	74 38		 je	 SHORT $LN6@Decide_Hal
; Line 503
  00076	8b 55 0c	 mov	 edx, DWORD PTR _execution_trace$[ebp]
  00079	8b 02		 mov	 eax, DWORD PTR [edx]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	89 4d f0	 mov	 DWORD PTR _address$1[ebp], ecx
; Line 504
  00080	8b 55 f0	 mov	 edx, DWORD PTR _address$1[ebp]
  00083	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  00086	89 45 f8	 mov	 DWORD PTR _size$2[ebp], eax
; Line 507
  00089	8b 4d f8	 mov	 ecx, DWORD PTR _size$2[ebp]
  0008c	3b 4d f4	 cmp	 ecx, DWORD PTR _Current_Length_Of_Execution_Trace$[ebp]
  0008f	76 1d		 jbe	 SHORT $LN6@Decide_Hal
; Line 509
  00091	8b 55 f8	 mov	 edx, DWORD PTR _size$2[ebp]
  00094	89 55 f4	 mov	 DWORD PTR _Current_Length_Of_Execution_Trace$[ebp], edx
; Line 510
  00097	8b 45 0c	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  0009a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009e	52		 push	 edx
  0009f	e8 00 00 00 00	 call	 _Needs_To_Be_Aborted_HH
  000a4	83 c4 04	 add	 esp, 4
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _Aborted$[ebp]
  000aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ac	89 02		 mov	 DWORD PTR [edx], eax
$LN6@Decide_Hal:
; Line 514
  000ae	e9 5a ff ff ff	 jmp	 $LN2@Decide_Hal
$LN3@Decide_Hal:
; Line 515
  000b3	8b 45 08	 mov	 eax, DWORD PTR _Aborted$[ebp]
  000b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b8	83 39 01	 cmp	 DWORD PTR [ecx], 1
  000bb	75 04		 jne	 SHORT $LN8@Decide_Hal
; Line 516
  000bd	33 c0		 xor	 eax, eax
  000bf	eb 05		 jmp	 SHORT $LN1@Decide_Hal
$LN8@Decide_Hal:
; Line 517
  000c1	b8 01 00 00 00	 mov	 eax, 1
$LN1@Decide_Hal:
; Line 518
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
_Decide_Halting_HH ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_last$ = -20						; size = 4
_size$ = -16						; size = 4
_ptr$ = -12						; size = 4
_Aborted$ = -8						; size = 4
_current$ = -4						; size = 4
_execution_trace$ = 8					; size = 4
_Needs_To_Be_Aborted_HH PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 456
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
; Line 457
  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Aborted$[ebp], 0
; Line 458
  0000d	8b 45 08	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  00010	89 45 f4	 mov	 DWORD PTR _ptr$[ebp], eax
; Line 459
  00013	b9 04 00 00 00	 mov	 ecx, 4
  00018	6b d1 ff	 imul	 edx, ecx, -1
  0001b	8b 45 f4	 mov	 eax, DWORD PTR _ptr$[ebp]
  0001e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00021	89 4d f0	 mov	 DWORD PTR _size$[ebp], ecx
; Line 462
  00024	8b 45 f0	 mov	 eax, DWORD PTR _size$[ebp]
  00027	33 d2		 xor	 edx, edx
  00029	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0002e	f7 f1		 div	 ecx
  00030	83 e8 01	 sub	 eax, 1
  00033	89 45 ec	 mov	 DWORD PTR _last$[ebp], eax
; Line 463
  00036	6b 55 ec 18	 imul	 edx, DWORD PTR _last$[ebp], 24
  0003a	03 55 08	 add	 edx, DWORD PTR _execution_trace$[ebp]
  0003d	89 55 fc	 mov	 DWORD PTR _current$[ebp], edx
; Line 465
  00040	8b 45 fc	 mov	 eax, DWORD PTR _current$[ebp]
  00043	81 78 10 e8 00
	00 00		 cmp	 DWORD PTR [eax+16], 232	; 000000e8H
  0004a	75 15		 jne	 SHORT $LN2@Needs_To_B
; Line 466
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _current$[ebp]
  0004f	51		 push	 ecx
  00050	8b 55 08	 mov	 edx, DWORD PTR _execution_trace$[ebp]
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 _Needs_To_Be_Aborted_Trace_HH
  00059	83 c4 08	 add	 esp, 8
  0005c	89 45 f8	 mov	 DWORD PTR _Aborted$[ebp], eax
  0005f	eb 1f		 jmp	 SHORT $LN3@Needs_To_B
$LN2@Needs_To_B:
; Line 467
  00061	8b 45 fc	 mov	 eax, DWORD PTR _current$[ebp]
  00064	81 78 10 eb 00
	00 00		 cmp	 DWORD PTR [eax+16], 235	; 000000ebH
  0006b	75 13		 jne	 SHORT $LN3@Needs_To_B
; Line 468
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _current$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 08	 mov	 edx, DWORD PTR _execution_trace$[ebp]
  00074	52		 push	 edx
  00075	e8 00 00 00 00	 call	 _Needs_To_Be_Aborted_Trace_HH
  0007a	83 c4 08	 add	 esp, 8
  0007d	89 45 f8	 mov	 DWORD PTR _Aborted$[ebp], eax
$LN3@Needs_To_B:
; Line 469
  00080	8b 45 f8	 mov	 eax, DWORD PTR _Aborted$[ebp]
; Line 470
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_Needs_To_Be_Aborted_HH ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_next2last$ = -24					; size = 4
_size$ = -20						; size = 4
_ptr$ = -16						; size = 4
_Count_Conditional_Branch_Instructions$ = -12		; size = 4
_N$ = -8						; size = 4
_traced$ = -4						; size = 4
_execution_trace$ = 8					; size = 4
_current$ = 12						; size = 4
_Needs_To_Be_Aborted_Trace_HH PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 409
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
; Line 414
  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _Count_Conditional_Branch_Instructions$[ebp], 0
; Line 416
  0000d	8b 45 08	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  00010	89 45 f0	 mov	 DWORD PTR _ptr$[ebp], eax
; Line 417
  00013	b9 04 00 00 00	 mov	 ecx, 4
  00018	6b d1 ff	 imul	 edx, ecx, -1
  0001b	8b 45 f0	 mov	 eax, DWORD PTR _ptr$[ebp]
  0001e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00021	89 4d ec	 mov	 DWORD PTR _size$[ebp], ecx
; Line 419
  00024	8b 45 ec	 mov	 eax, DWORD PTR _size$[ebp]
  00027	33 d2		 xor	 edx, edx
  00029	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0002e	f7 f1		 div	 ecx
  00030	83 e8 02	 sub	 eax, 2
  00033	89 45 e8	 mov	 DWORD PTR _next2last$[ebp], eax
; Line 422
  00036	8b 55 e8	 mov	 edx, DWORD PTR _next2last$[ebp]
  00039	89 55 f8	 mov	 DWORD PTR _N$[ebp], edx
  0003c	eb 09		 jmp	 SHORT $LN4@Needs_To_B
$LN2@Needs_To_B:
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _N$[ebp]
  00041	83 e8 01	 sub	 eax, 1
  00044	89 45 f8	 mov	 DWORD PTR _N$[ebp], eax
$LN4@Needs_To_B:
  00047	83 7d f8 00	 cmp	 DWORD PTR _N$[ebp], 0
  0004b	0f 8c af 00 00
	00		 jl	 $LN3@Needs_To_B
; Line 424
  00051	6b 4d f8 18	 imul	 ecx, DWORD PTR _N$[ebp], 24
  00055	03 4d 08	 add	 ecx, DWORD PTR _execution_trace$[ebp]
  00058	89 4d fc	 mov	 DWORD PTR _traced$[ebp], ecx
; Line 427
  0005b	8b 55 fc	 mov	 edx, DWORD PTR _traced$[ebp]
  0005e	83 7a 10 7f	 cmp	 DWORD PTR [edx+16], 127	; 0000007fH
  00062	75 09		 jne	 SHORT $LN5@Needs_To_B
; Line 428
  00064	8b 45 f4	 mov	 eax, DWORD PTR _Count_Conditional_Branch_Instructions$[ebp]
  00067	83 c0 01	 add	 eax, 1
  0006a	89 45 f4	 mov	 DWORD PTR _Count_Conditional_Branch_Instructions$[ebp], eax
$LN5@Needs_To_B:
; Line 430
  0006d	8b 4d 0c	 mov	 ecx, DWORD PTR _current$[ebp]
  00070	81 79 10 eb 00
	00 00		 cmp	 DWORD PTR [ecx+16], 235	; 000000ebH
  00077	75 34		 jne	 SHORT $LN6@Needs_To_B
; Line 431
  00079	8b 55 0c	 mov	 edx, DWORD PTR _current$[ebp]
  0007c	8b 45 0c	 mov	 eax, DWORD PTR _current$[ebp]
  0007f	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00082	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00084	77 27		 ja	 SHORT $LN6@Needs_To_B
; Line 432
  00086	8b 55 fc	 mov	 edx, DWORD PTR _traced$[ebp]
  00089	8b 45 0c	 mov	 eax, DWORD PTR _current$[ebp]
  0008c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0008e	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00091	75 1a		 jne	 SHORT $LN6@Needs_To_B
; Line 433
  00093	83 7d f4 00	 cmp	 DWORD PTR _Count_Conditional_Branch_Instructions$[ebp], 0
  00097	75 14		 jne	 SHORT $LN6@Needs_To_B
; Line 435
  00099	68 00 00 00 00	 push	 OFFSET $SG9687
  0009e	e8 00 00 00 00	 call	 _OutputString
  000a3	83 c4 04	 add	 esp, 4
; Line 437
  000a6	b8 01 00 00 00	 mov	 eax, 1
  000ab	eb 55		 jmp	 SHORT $LN1@Needs_To_B
$LN6@Needs_To_B:
; Line 439
  000ad	8b 55 0c	 mov	 edx, DWORD PTR _current$[ebp]
  000b0	81 7a 10 e8 00
	00 00		 cmp	 DWORD PTR [edx+16], 232	; 000000e8H
  000b7	75 42		 jne	 SHORT $LN10@Needs_To_B
; Line 440
  000b9	8b 45 0c	 mov	 eax, DWORD PTR _current$[ebp]
  000bc	8b 4d fc	 mov	 ecx, DWORD PTR _traced$[ebp]
  000bf	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000c2	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  000c5	75 34		 jne	 SHORT $LN10@Needs_To_B
; Line 441
  000c7	8b 45 0c	 mov	 eax, DWORD PTR _current$[ebp]
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR _traced$[ebp]
  000cd	8b 10		 mov	 edx, DWORD PTR [eax]
  000cf	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000d1	75 28		 jne	 SHORT $LN10@Needs_To_B
; Line 442
  000d3	8b 45 0c	 mov	 eax, DWORD PTR _current$[ebp]
  000d6	8b 4d fc	 mov	 ecx, DWORD PTR _traced$[ebp]
  000d9	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  000dc	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  000df	75 1a		 jne	 SHORT $LN10@Needs_To_B
; Line 443
  000e1	83 7d f4 00	 cmp	 DWORD PTR _Count_Conditional_Branch_Instructions$[ebp], 0
  000e5	75 14		 jne	 SHORT $LN10@Needs_To_B
; Line 445
  000e7	68 00 00 00 00	 push	 OFFSET $SG9693
  000ec	e8 00 00 00 00	 call	 _OutputString
  000f1	83 c4 04	 add	 esp, 4
; Line 448
  000f4	b8 01 00 00 00	 mov	 eax, 1
  000f9	eb 07		 jmp	 SHORT $LN1@Needs_To_B
$LN10@Needs_To_B:
; Line 450
  000fb	e9 3e ff ff ff	 jmp	 $LN2@Needs_To_B
$LN3@Needs_To_B:
; Line 451
  00100	33 c0		 xor	 eax, eax
$LN1@Needs_To_B:
; Line 452
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c3		 ret	 0
_Needs_To_Be_Aborted_Trace_HH ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Top_of_Stack$ = -4					; size = 4
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_End_Of_Code$ = 16					; size = 4
_slave_state$ = 20					; size = 4
_slave_stack$ = 24					; size = 4
_Init_slave_state PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 388
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 393
  00004	8b 45 0c	 mov	 eax, DWORD PTR _I$[ebp]
  00007	50		 push	 eax
  00008	8b 4d 18	 mov	 ecx, DWORD PTR _slave_stack$[ebp]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 _StackPush
  00011	83 c4 08	 add	 esp, 8
  00014	89 45 fc	 mov	 DWORD PTR _Top_of_Stack$[ebp], eax
; Line 394
  00017	8b 55 10	 mov	 edx, DWORD PTR _End_Of_Code$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _slave_stack$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _StackPush
  00024	83 c4 08	 add	 esp, 8
  00027	89 45 fc	 mov	 DWORD PTR _Top_of_Stack$[ebp], eax
; Line 396
  0002a	8b 4d 14	 mov	 ecx, DWORD PTR _slave_state$[ebp]
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 _SaveState
  00033	83 c4 04	 add	 esp, 4
; Line 400
  00036	8b 55 14	 mov	 edx, DWORD PTR _slave_state$[ebp]
  00039	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  0003c	89 02		 mov	 DWORD PTR [edx], eax
; Line 401
  0003e	8b 4d 14	 mov	 ecx, DWORD PTR _slave_state$[ebp]
  00041	8b 55 fc	 mov	 edx, DWORD PTR _Top_of_Stack$[ebp]
  00044	89 51 20	 mov	 DWORD PTR [ecx+32], edx
; Line 402
  00047	8b 45 14	 mov	 eax, DWORD PTR _slave_state$[ebp]
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _Top_of_Stack$[ebp]
  0004d	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
; Line 403
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_Init_slave_state ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_EIP$1 = -8						; size = 4
_Aborted$ = -4						; size = 4
_Halt_Decider_Name$ = 8					; size = 4
_execution_trace$ = 12					; size = 4
_decoded$ = 16						; size = 4
_code_end$ = 20						; size = 4
_master_state$ = 24					; size = 4
_slave_state$ = 28					; size = 4
_slave_stack$ = 32					; size = 4
_Address_of_H$ = 36					; size = 4
_P$ = 40						; size = 4
_I$ = 44						; size = 4
_Decide_Halting PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 351
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; Line 352
  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Aborted$[ebp], 0
$LN2@Decide_Hal:
; Line 353
  0000d	83 7d fc 00	 cmp	 DWORD PTR _Aborted$[ebp], 0
  00011	75 6b		 jne	 SHORT $LN3@Decide_Hal
; Line 355
  00013	8b 45 1c	 mov	 eax, DWORD PTR _slave_state$[ebp]
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001a	89 55 f8	 mov	 DWORD PTR _EIP$1[ebp], edx
; Line 356
  0001d	8b 45 10	 mov	 eax, DWORD PTR _decoded$[ebp]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	51		 push	 ecx
  00023	8b 55 1c	 mov	 edx, DWORD PTR _slave_state$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d 18	 mov	 ecx, DWORD PTR _master_state$[ebp]
  0002c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 _DebugStep
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 357
  00037	8b 45 f8	 mov	 eax, DWORD PTR _EIP$1[ebp]
  0003a	3b 45 14	 cmp	 eax, DWORD PTR _code_end$[ebp]
  0003d	75 0a		 jne	 SHORT $LN4@Decide_Hal
; Line 358
  0003f	b8 01 00 00 00	 mov	 eax, 1
  00044	e9 89 00 00 00	 jmp	 $LN1@Decide_Hal
$LN4@Decide_Hal:
; Line 365
  00049	6a 18		 push	 24			; 00000018H
  0004b	8b 4d 10	 mov	 ecx, DWORD PTR _decoded$[ebp]
  0004e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00050	52		 push	 edx
  00051	8b 45 0c	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 _PushBack
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 366
  0005f	8b 55 2c	 mov	 edx, DWORD PTR _I$[ebp]
  00062	52		 push	 edx
  00063	8b 45 28	 mov	 eax, DWORD PTR _P$[ebp]
  00066	50		 push	 eax
  00067	8b 4d 24	 mov	 ecx, DWORD PTR _Address_of_H$[ebp]
  0006a	51		 push	 ecx
  0006b	8b 55 0c	 mov	 edx, DWORD PTR _execution_trace$[ebp]
  0006e	8b 02		 mov	 eax, DWORD PTR [edx]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _Needs_To_Be_Aborted
  00076	83 c4 10	 add	 esp, 16			; 00000010H
  00079	89 45 fc	 mov	 DWORD PTR _Aborted$[ebp], eax
; Line 368
  0007c	eb 8f		 jmp	 SHORT $LN2@Decide_Hal
$LN3@Decide_Hal:
; Line 369
  0007e	83 7d fc 00	 cmp	 DWORD PTR _Aborted$[ebp], 0
  00082	74 49		 je	 SHORT $LN5@Decide_Hal
; Line 371
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _Halt_Decider_Name$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 _OutputString
  0008d	83 c4 04	 add	 esp, 4
; Line 372
  00090	83 7d fc 01	 cmp	 DWORD PTR _Aborted$[ebp], 1
  00094	75 0d		 jne	 SHORT $LN6@Decide_Hal
; Line 373
  00096	68 00 00 00 00	 push	 OFFSET $SG9645
  0009b	e8 00 00 00 00	 call	 _OutputString
  000a0	83 c4 04	 add	 esp, 4
$LN6@Decide_Hal:
; Line 374
  000a3	83 7d fc 02	 cmp	 DWORD PTR _Aborted$[ebp], 2
  000a7	75 0d		 jne	 SHORT $LN7@Decide_Hal
; Line 375
  000a9	68 00 00 00 00	 push	 OFFSET $SG9647
  000ae	e8 00 00 00 00	 call	 _OutputString
  000b3	83 c4 04	 add	 esp, 4
$LN7@Decide_Hal:
; Line 376
  000b6	83 7d fc 03	 cmp	 DWORD PTR _Aborted$[ebp], 3
  000ba	75 0d		 jne	 SHORT $LN8@Decide_Hal
; Line 377
  000bc	68 00 00 00 00	 push	 OFFSET $SG9649
  000c1	e8 00 00 00 00	 call	 _OutputString
  000c6	83 c4 04	 add	 esp, 4
$LN8@Decide_Hal:
; Line 379
  000c9	33 c0		 xor	 eax, eax
  000cb	eb 05		 jmp	 SHORT $LN1@Decide_Hal
$LN5@Decide_Hal:
; Line 381
  000cd	b8 01 00 00 00	 mov	 eax, 1
$LN1@Decide_Hal:
; Line 382
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_Decide_Halting ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_last$ = -20						; size = 4
_size$ = -16						; size = 4
_ptr$ = -12						; size = 4
_Aborted$ = -8						; size = 4
_current$ = -4						; size = 4
_execution_trace$ = 8					; size = 4
_Address_of_H$ = 12					; size = 4
_P$ = 16						; size = 4
_I$ = 20						; size = 4
_Needs_To_Be_Aborted PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 317
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
; Line 318
  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Aborted$[ebp], 0
; Line 319
  0000d	8b 45 08	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  00010	89 45 f4	 mov	 DWORD PTR _ptr$[ebp], eax
; Line 320
  00013	b9 04 00 00 00	 mov	 ecx, 4
  00018	6b d1 ff	 imul	 edx, ecx, -1
  0001b	8b 45 f4	 mov	 eax, DWORD PTR _ptr$[ebp]
  0001e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00021	89 4d f0	 mov	 DWORD PTR _size$[ebp], ecx
; Line 322
  00024	8b 45 f0	 mov	 eax, DWORD PTR _size$[ebp]
  00027	33 d2		 xor	 edx, edx
  00029	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0002e	f7 f1		 div	 ecx
  00030	83 e8 01	 sub	 eax, 1
  00033	89 45 ec	 mov	 DWORD PTR _last$[ebp], eax
; Line 323
  00036	6b 55 ec 18	 imul	 edx, DWORD PTR _last$[ebp], 24
  0003a	03 55 08	 add	 edx, DWORD PTR _execution_trace$[ebp]
  0003d	89 55 fc	 mov	 DWORD PTR _current$[ebp], edx
; Line 325
  00040	8b 45 fc	 mov	 eax, DWORD PTR _current$[ebp]
  00043	81 78 10 e8 00
	00 00		 cmp	 DWORD PTR [eax+16], 232	; 000000e8H
  0004a	75 3d		 jne	 SHORT $LN2@Needs_To_B
; Line 327
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _current$[ebp]
  0004f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00052	3b 55 0c	 cmp	 edx, DWORD PTR _Address_of_H$[ebp]
  00055	75 1d		 jne	 SHORT $LN4@Needs_To_B
; Line 328
  00057	8b 45 14	 mov	 eax, DWORD PTR _I$[ebp]
  0005a	50		 push	 eax
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _P$[ebp]
  0005e	51		 push	 ecx
  0005f	8b 55 fc	 mov	 edx, DWORD PTR _current$[ebp]
  00062	52		 push	 edx
  00063	8b 45 08	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _Infinite_Simulation_Needs_To_Be_Aborted_Trace
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	89 45 f8	 mov	 DWORD PTR _Aborted$[ebp], eax
  00072	eb 13		 jmp	 SHORT $LN5@Needs_To_B
$LN4@Needs_To_B:
; Line 331
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _current$[ebp]
  00077	51		 push	 ecx
  00078	8b 55 08	 mov	 edx, DWORD PTR _execution_trace$[ebp]
  0007b	52		 push	 edx
  0007c	e8 00 00 00 00	 call	 _Infinite_Recursion_Needs_To_Be_Aborted_Trace
  00081	83 c4 08	 add	 esp, 8
  00084	89 45 f8	 mov	 DWORD PTR _Aborted$[ebp], eax
$LN5@Needs_To_B:
; Line 333
  00087	eb 1f		 jmp	 SHORT $LN3@Needs_To_B
$LN2@Needs_To_B:
; Line 334
  00089	8b 45 fc	 mov	 eax, DWORD PTR _current$[ebp]
  0008c	81 78 10 eb 00
	00 00		 cmp	 DWORD PTR [eax+16], 235	; 000000ebH
  00093	75 13		 jne	 SHORT $LN3@Needs_To_B
; Line 335
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _current$[ebp]
  00098	51		 push	 ecx
  00099	8b 55 08	 mov	 edx, DWORD PTR _execution_trace$[ebp]
  0009c	52		 push	 edx
  0009d	e8 00 00 00 00	 call	 _Infinite_Loop_Needs_To_Be_Aborted_Trace
  000a2	83 c4 08	 add	 esp, 8
  000a5	89 45 f8	 mov	 DWORD PTR _Aborted$[ebp], eax
$LN3@Needs_To_B:
; Line 336
  000a8	8b 45 f8	 mov	 eax, DWORD PTR _Aborted$[ebp]
; Line 337
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
_Needs_To_Be_Aborted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_next2last$ = -32					; size = 4
_size$ = -28						; size = 4
_ptr$ = -24						; size = 4
_Conditional_Branch_Count$ = -20			; size = 4
_Count_PUSH_Instructions$ = -16				; size = 4
_N$ = -12						; size = 4
_Num_PUSH_Matched$ = -8					; size = 4
_traced$ = -4						; size = 4
_execution_trace$ = 8					; size = 4
_current$ = 12						; size = 4
_P$ = 16						; size = 4
_I$ = 20						; size = 4
_Infinite_Simulation_Needs_To_Be_Aborted_Trace PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 280
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
; Line 282
  00006	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _Count_PUSH_Instructions$[ebp], 0
; Line 283
  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Num_PUSH_Matched$[ebp], 0
; Line 284
  00014	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _Conditional_Branch_Count$[ebp], 0
; Line 286
  0001b	8b 45 08	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  0001e	89 45 e8	 mov	 DWORD PTR _ptr$[ebp], eax
; Line 287
  00021	b9 04 00 00 00	 mov	 ecx, 4
  00026	6b d1 ff	 imul	 edx, ecx, -1
  00029	8b 45 e8	 mov	 eax, DWORD PTR _ptr$[ebp]
  0002c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0002f	89 4d e4	 mov	 DWORD PTR _size$[ebp], ecx
; Line 288
  00032	8b 45 e4	 mov	 eax, DWORD PTR _size$[ebp]
  00035	33 d2		 xor	 edx, edx
  00037	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0003c	f7 f1		 div	 ecx
  0003e	83 e8 02	 sub	 eax, 2
  00041	89 45 e0	 mov	 DWORD PTR _next2last$[ebp], eax
; Line 291
  00044	8b 55 e0	 mov	 edx, DWORD PTR _next2last$[ebp]
  00047	89 55 f4	 mov	 DWORD PTR _N$[ebp], edx
  0004a	eb 09		 jmp	 SHORT $LN4@Infinite_S
$LN2@Infinite_S:
  0004c	8b 45 f4	 mov	 eax, DWORD PTR _N$[ebp]
  0004f	83 e8 01	 sub	 eax, 1
  00052	89 45 f4	 mov	 DWORD PTR _N$[ebp], eax
$LN4@Infinite_S:
  00055	83 7d f4 00	 cmp	 DWORD PTR _N$[ebp], 0
  00059	0f 8c 92 00 00
	00		 jl	 $LN3@Infinite_S
; Line 293
  0005f	6b 4d f4 18	 imul	 ecx, DWORD PTR _N$[ebp], 24
  00063	03 4d 08	 add	 ecx, DWORD PTR _execution_trace$[ebp]
  00066	89 4d fc	 mov	 DWORD PTR _traced$[ebp], ecx
; Line 294
  00069	8b 55 fc	 mov	 edx, DWORD PTR _traced$[ebp]
  0006c	83 7a 10 7f	 cmp	 DWORD PTR [edx+16], 127	; 0000007fH
  00070	75 09		 jne	 SHORT $LN5@Infinite_S
; Line 295
  00072	8b 45 ec	 mov	 eax, DWORD PTR _Conditional_Branch_Count$[ebp]
  00075	83 c0 01	 add	 eax, 1
  00078	89 45 ec	 mov	 DWORD PTR _Conditional_Branch_Count$[ebp], eax
$LN5@Infinite_S:
; Line 297
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _traced$[ebp]
  0007e	83 79 10 68	 cmp	 DWORD PTR [ecx+16], 104	; 00000068H
  00082	75 09		 jne	 SHORT $LN6@Infinite_S
; Line 298
  00084	8b 55 f0	 mov	 edx, DWORD PTR _Count_PUSH_Instructions$[ebp]
  00087	83 c2 01	 add	 edx, 1
  0008a	89 55 f0	 mov	 DWORD PTR _Count_PUSH_Instructions$[ebp], edx
$LN6@Infinite_S:
; Line 301
  0008d	8b 45 fc	 mov	 eax, DWORD PTR _traced$[ebp]
  00090	83 78 10 68	 cmp	 DWORD PTR [eax+16], 104	; 00000068H
  00094	75 1a		 jne	 SHORT $LN7@Infinite_S
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _traced$[ebp]
  00099	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0009c	3b 55 10	 cmp	 edx, DWORD PTR _P$[ebp]
  0009f	75 0f		 jne	 SHORT $LN7@Infinite_S
  000a1	83 7d f0 01	 cmp	 DWORD PTR _Count_PUSH_Instructions$[ebp], 1
  000a5	75 09		 jne	 SHORT $LN7@Infinite_S
; Line 302
  000a7	8b 45 f8	 mov	 eax, DWORD PTR _Num_PUSH_Matched$[ebp]
  000aa	83 c0 01	 add	 eax, 1
  000ad	89 45 f8	 mov	 DWORD PTR _Num_PUSH_Matched$[ebp], eax
$LN7@Infinite_S:
; Line 305
  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _traced$[ebp]
  000b3	83 79 10 68	 cmp	 DWORD PTR [ecx+16], 104	; 00000068H
  000b7	75 1a		 jne	 SHORT $LN8@Infinite_S
  000b9	8b 55 fc	 mov	 edx, DWORD PTR _traced$[ebp]
  000bc	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000bf	3b 45 14	 cmp	 eax, DWORD PTR _I$[ebp]
  000c2	75 0f		 jne	 SHORT $LN8@Infinite_S
  000c4	83 7d f0 02	 cmp	 DWORD PTR _Count_PUSH_Instructions$[ebp], 2
  000c8	75 09		 jne	 SHORT $LN8@Infinite_S
; Line 306
  000ca	8b 4d f8	 mov	 ecx, DWORD PTR _Num_PUSH_Matched$[ebp]
  000cd	83 c1 01	 add	 ecx, 1
  000d0	89 4d f8	 mov	 DWORD PTR _Num_PUSH_Matched$[ebp], ecx
$LN8@Infinite_S:
; Line 308
  000d3	83 7d f8 02	 cmp	 DWORD PTR _Num_PUSH_Matched$[ebp], 2
  000d7	75 13		 jne	 SHORT $LN9@Infinite_S
  000d9	83 7d f4 00	 cmp	 DWORD PTR _N$[ebp], 0
  000dd	75 0d		 jne	 SHORT $LN9@Infinite_S
  000df	83 7d ec 00	 cmp	 DWORD PTR _Conditional_Branch_Count$[ebp], 0
  000e3	75 07		 jne	 SHORT $LN9@Infinite_S
; Line 309
  000e5	b8 03 00 00 00	 mov	 eax, 3
  000ea	eb 07		 jmp	 SHORT $LN1@Infinite_S
$LN9@Infinite_S:
; Line 310
  000ec	e9 5b ff ff ff	 jmp	 $LN2@Infinite_S
$LN3@Infinite_S:
; Line 311
  000f1	33 c0		 xor	 eax, eax
$LN1@Infinite_S:
; Line 312
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
_Infinite_Simulation_Needs_To_Be_Aborted_Trace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Size$ = -12						; size = 4
_Capacity$ = -8						; size = 4
_Top_of_Stack$ = -4					; size = 4
_P$ = 8							; size = 4
_End_Of_Code$ = 12					; size = 4
_slave_state$ = 16					; size = 4
_slave_stack$ = 20					; size = 4
_Init_slave_state0 PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 261
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; Line 266
  00006	8b 45 0c	 mov	 eax, DWORD PTR _End_Of_Code$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 14	 mov	 ecx, DWORD PTR _slave_stack$[ebp]
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 _StackPush
  00013	83 c4 08	 add	 esp, 8
  00016	89 45 fc	 mov	 DWORD PTR _Top_of_Stack$[ebp], eax
; Line 267
  00019	8b 55 10	 mov	 edx, DWORD PTR _slave_state$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 _SaveState
  00022	83 c4 04	 add	 esp, 4
; Line 268
  00025	b8 04 00 00 00	 mov	 eax, 4
  0002a	6b c8 fe	 imul	 ecx, eax, -2
  0002d	8b 55 14	 mov	 edx, DWORD PTR _slave_stack$[ebp]
  00030	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00033	89 45 f8	 mov	 DWORD PTR _Capacity$[ebp], eax
; Line 269
  00036	b9 04 00 00 00	 mov	 ecx, 4
  0003b	6b d1 ff	 imul	 edx, ecx, -1
  0003e	8b 45 14	 mov	 eax, DWORD PTR _slave_stack$[ebp]
  00041	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00044	89 4d f4	 mov	 DWORD PTR _Size$[ebp], ecx
; Line 271
  00047	8b 55 10	 mov	 edx, DWORD PTR _slave_state$[ebp]
  0004a	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  0004d	89 02		 mov	 DWORD PTR [edx], eax
; Line 272
  0004f	8b 4d 10	 mov	 ecx, DWORD PTR _slave_state$[ebp]
  00052	8b 55 fc	 mov	 edx, DWORD PTR _Top_of_Stack$[ebp]
  00055	89 51 20	 mov	 DWORD PTR [ecx+32], edx
; Line 273
  00058	8b 45 10	 mov	 eax, DWORD PTR _slave_state$[ebp]
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _Top_of_Stack$[ebp]
  0005e	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
; Line 274
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_Init_slave_state0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_EIP$1 = -8						; size = 4
_Aborted$ = -4						; size = 4
_Halt_Decider_Name$ = 8					; size = 4
_execution_trace$ = 12					; size = 4
_decoded$ = 16						; size = 4
_code_end$ = 20						; size = 4
_master_state$ = 24					; size = 4
_slave_state$ = 28					; size = 4
_slave_stack$ = 32					; size = 4
_Address_of_H$ = 36					; size = 4
_P$ = 40						; size = 4
_Decide_Halting0 PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 228
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; Line 229
  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Aborted$[ebp], 0
$LN2@Decide_Hal:
; Line 230
  0000d	83 7d fc 00	 cmp	 DWORD PTR _Aborted$[ebp], 0
  00011	75 67		 jne	 SHORT $LN3@Decide_Hal
; Line 232
  00013	8b 45 1c	 mov	 eax, DWORD PTR _slave_state$[ebp]
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001a	89 55 f8	 mov	 DWORD PTR _EIP$1[ebp], edx
; Line 233
  0001d	8b 45 10	 mov	 eax, DWORD PTR _decoded$[ebp]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	51		 push	 ecx
  00023	8b 55 1c	 mov	 edx, DWORD PTR _slave_state$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	50		 push	 eax
  00029	8b 4d 18	 mov	 ecx, DWORD PTR _master_state$[ebp]
  0002c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 _DebugStep
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 234
  00037	8b 45 f8	 mov	 eax, DWORD PTR _EIP$1[ebp]
  0003a	3b 45 14	 cmp	 eax, DWORD PTR _code_end$[ebp]
  0003d	75 0a		 jne	 SHORT $LN4@Decide_Hal
; Line 235
  0003f	b8 01 00 00 00	 mov	 eax, 1
  00044	e9 85 00 00 00	 jmp	 $LN1@Decide_Hal
$LN4@Decide_Hal:
; Line 240
  00049	6a 18		 push	 24			; 00000018H
  0004b	8b 4d 10	 mov	 ecx, DWORD PTR _decoded$[ebp]
  0004e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00050	52		 push	 edx
  00051	8b 45 0c	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 _PushBack
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 241
  0005f	8b 55 28	 mov	 edx, DWORD PTR _P$[ebp]
  00062	52		 push	 edx
  00063	8b 45 24	 mov	 eax, DWORD PTR _Address_of_H$[ebp]
  00066	50		 push	 eax
  00067	8b 4d 0c	 mov	 ecx, DWORD PTR _execution_trace$[ebp]
  0006a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 _Needs_To_Be_Aborted0
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
  00075	89 45 fc	 mov	 DWORD PTR _Aborted$[ebp], eax
; Line 242
  00078	eb 93		 jmp	 SHORT $LN2@Decide_Hal
$LN3@Decide_Hal:
; Line 243
  0007a	83 7d fc 00	 cmp	 DWORD PTR _Aborted$[ebp], 0
  0007e	74 49		 je	 SHORT $LN5@Decide_Hal
; Line 245
  00080	8b 45 08	 mov	 eax, DWORD PTR _Halt_Decider_Name$[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _OutputString
  00089	83 c4 04	 add	 esp, 4
; Line 246
  0008c	83 7d fc 01	 cmp	 DWORD PTR _Aborted$[ebp], 1
  00090	75 0d		 jne	 SHORT $LN6@Decide_Hal
; Line 247
  00092	68 00 00 00 00	 push	 OFFSET $SG9542
  00097	e8 00 00 00 00	 call	 _OutputString
  0009c	83 c4 04	 add	 esp, 4
$LN6@Decide_Hal:
; Line 248
  0009f	83 7d fc 02	 cmp	 DWORD PTR _Aborted$[ebp], 2
  000a3	75 0d		 jne	 SHORT $LN7@Decide_Hal
; Line 249
  000a5	68 00 00 00 00	 push	 OFFSET $SG9544
  000aa	e8 00 00 00 00	 call	 _OutputString
  000af	83 c4 04	 add	 esp, 4
$LN7@Decide_Hal:
; Line 250
  000b2	83 7d fc 03	 cmp	 DWORD PTR _Aborted$[ebp], 3
  000b6	75 0d		 jne	 SHORT $LN8@Decide_Hal
; Line 251
  000b8	68 00 00 00 00	 push	 OFFSET $SG9546
  000bd	e8 00 00 00 00	 call	 _OutputString
  000c2	83 c4 04	 add	 esp, 4
$LN8@Decide_Hal:
; Line 252
  000c5	33 c0		 xor	 eax, eax
  000c7	eb 05		 jmp	 SHORT $LN1@Decide_Hal
$LN5@Decide_Hal:
; Line 254
  000c9	b8 01 00 00 00	 mov	 eax, 1
$LN1@Decide_Hal:
; Line 255
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
_Decide_Halting0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_last$ = -20						; size = 4
_size$ = -16						; size = 4
_ptr$ = -12						; size = 4
_Aborted$ = -8						; size = 4
_current$ = -4						; size = 4
_execution_trace$ = 8					; size = 4
_Address_of_H$ = 12					; size = 4
_P$ = 16						; size = 4
_Needs_To_Be_Aborted0 PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 196
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
; Line 197
  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Aborted$[ebp], 0
; Line 198
  0000d	8b 45 08	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  00010	89 45 f4	 mov	 DWORD PTR _ptr$[ebp], eax
; Line 199
  00013	b9 04 00 00 00	 mov	 ecx, 4
  00018	6b d1 ff	 imul	 edx, ecx, -1
  0001b	8b 45 f4	 mov	 eax, DWORD PTR _ptr$[ebp]
  0001e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00021	89 4d f0	 mov	 DWORD PTR _size$[ebp], ecx
; Line 200
  00024	8b 45 f0	 mov	 eax, DWORD PTR _size$[ebp]
  00027	33 d2		 xor	 edx, edx
  00029	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0002e	f7 f1		 div	 ecx
  00030	83 e8 01	 sub	 eax, 1
  00033	89 45 ec	 mov	 DWORD PTR _last$[ebp], eax
; Line 201
  00036	6b 55 ec 18	 imul	 edx, DWORD PTR _last$[ebp], 24
  0003a	03 55 08	 add	 edx, DWORD PTR _execution_trace$[ebp]
  0003d	89 55 fc	 mov	 DWORD PTR _current$[ebp], edx
; Line 204
  00040	8b 45 fc	 mov	 eax, DWORD PTR _current$[ebp]
  00043	81 78 10 e8 00
	00 00		 cmp	 DWORD PTR [eax+16], 232	; 000000e8H
  0004a	75 39		 jne	 SHORT $LN2@Needs_To_B
; Line 206
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _current$[ebp]
  0004f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00052	3b 55 0c	 cmp	 edx, DWORD PTR _Address_of_H$[ebp]
  00055	75 19		 jne	 SHORT $LN4@Needs_To_B
; Line 207
  00057	8b 45 10	 mov	 eax, DWORD PTR _P$[ebp]
  0005a	50		 push	 eax
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _current$[ebp]
  0005e	51		 push	 ecx
  0005f	8b 55 08	 mov	 edx, DWORD PTR _execution_trace$[ebp]
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 _Infinite_Simulation_Needs_To_Be_Aborted_Trace0
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006b	89 45 f8	 mov	 DWORD PTR _Aborted$[ebp], eax
  0006e	eb 13		 jmp	 SHORT $LN5@Needs_To_B
$LN4@Needs_To_B:
; Line 209
  00070	8b 45 fc	 mov	 eax, DWORD PTR _current$[ebp]
  00073	50		 push	 eax
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _execution_trace$[ebp]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 _Infinite_Recursion_Needs_To_Be_Aborted_Trace
  0007d	83 c4 08	 add	 esp, 8
  00080	89 45 f8	 mov	 DWORD PTR _Aborted$[ebp], eax
$LN5@Needs_To_B:
; Line 210
  00083	eb 1f		 jmp	 SHORT $LN3@Needs_To_B
$LN2@Needs_To_B:
; Line 211
  00085	8b 55 fc	 mov	 edx, DWORD PTR _current$[ebp]
  00088	81 7a 10 eb 00
	00 00		 cmp	 DWORD PTR [edx+16], 235	; 000000ebH
  0008f	75 13		 jne	 SHORT $LN3@Needs_To_B
; Line 212
  00091	8b 45 fc	 mov	 eax, DWORD PTR _current$[ebp]
  00094	50		 push	 eax
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _execution_trace$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _Infinite_Loop_Needs_To_Be_Aborted_Trace
  0009e	83 c4 08	 add	 esp, 8
  000a1	89 45 f8	 mov	 DWORD PTR _Aborted$[ebp], eax
$LN3@Needs_To_B:
; Line 213
  000a4	8b 45 f8	 mov	 eax, DWORD PTR _Aborted$[ebp]
; Line 214
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
_Needs_To_Be_Aborted0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_next2last$ = -32					; size = 4
_size$ = -28						; size = 4
_ptr$ = -24						; size = 4
_Conditional_Branch_Count$ = -20			; size = 4
_Num_PUSH_Matched$ = -16				; size = 4
_Count_PUSH_Instructions$ = -12				; size = 4
_traced$ = -8						; size = 4
_N$1 = -4						; size = 4
_execution_trace$ = 8					; size = 4
_current$ = 12						; size = 4
_P$ = 16						; size = 4
_Infinite_Simulation_Needs_To_Be_Aborted_Trace0 PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 167
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
; Line 169
  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _Count_PUSH_Instructions$[ebp], 0
; Line 170
  0000d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _Num_PUSH_Matched$[ebp], 0
; Line 171
  00014	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _Conditional_Branch_Count$[ebp], 0
; Line 173
  0001b	8b 45 08	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  0001e	89 45 e8	 mov	 DWORD PTR _ptr$[ebp], eax
; Line 174
  00021	b9 04 00 00 00	 mov	 ecx, 4
  00026	6b d1 ff	 imul	 edx, ecx, -1
  00029	8b 45 e8	 mov	 eax, DWORD PTR _ptr$[ebp]
  0002c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0002f	89 4d e4	 mov	 DWORD PTR _size$[ebp], ecx
; Line 175
  00032	8b 45 e4	 mov	 eax, DWORD PTR _size$[ebp]
  00035	33 d2		 xor	 edx, edx
  00037	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0003c	f7 f1		 div	 ecx
  0003e	83 e8 02	 sub	 eax, 2
  00041	89 45 e0	 mov	 DWORD PTR _next2last$[ebp], eax
; Line 176
  00044	8b 55 e0	 mov	 edx, DWORD PTR _next2last$[ebp]
  00047	89 55 fc	 mov	 DWORD PTR _N$1[ebp], edx
  0004a	eb 09		 jmp	 SHORT $LN4@Infinite_S
$LN2@Infinite_S:
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _N$1[ebp]
  0004f	83 e8 01	 sub	 eax, 1
  00052	89 45 fc	 mov	 DWORD PTR _N$1[ebp], eax
$LN4@Infinite_S:
  00055	83 7d fc 00	 cmp	 DWORD PTR _N$1[ebp], 0
  00059	7c 6c		 jl	 SHORT $LN3@Infinite_S
; Line 178
  0005b	6b 4d fc 18	 imul	 ecx, DWORD PTR _N$1[ebp], 24
  0005f	03 4d 08	 add	 ecx, DWORD PTR _execution_trace$[ebp]
  00062	89 4d f8	 mov	 DWORD PTR _traced$[ebp], ecx
; Line 179
  00065	8b 55 f8	 mov	 edx, DWORD PTR _traced$[ebp]
  00068	83 7a 10 7f	 cmp	 DWORD PTR [edx+16], 127	; 0000007fH
  0006c	75 09		 jne	 SHORT $LN5@Infinite_S
; Line 180
  0006e	8b 45 ec	 mov	 eax, DWORD PTR _Conditional_Branch_Count$[ebp]
  00071	83 c0 01	 add	 eax, 1
  00074	89 45 ec	 mov	 DWORD PTR _Conditional_Branch_Count$[ebp], eax
$LN5@Infinite_S:
; Line 182
  00077	8b 4d f8	 mov	 ecx, DWORD PTR _traced$[ebp]
  0007a	83 79 10 68	 cmp	 DWORD PTR [ecx+16], 104	; 00000068H
  0007e	75 09		 jne	 SHORT $LN6@Infinite_S
; Line 183
  00080	8b 55 f4	 mov	 edx, DWORD PTR _Count_PUSH_Instructions$[ebp]
  00083	83 c2 01	 add	 edx, 1
  00086	89 55 f4	 mov	 DWORD PTR _Count_PUSH_Instructions$[ebp], edx
$LN6@Infinite_S:
; Line 185
  00089	8b 45 f8	 mov	 eax, DWORD PTR _traced$[ebp]
  0008c	83 78 10 68	 cmp	 DWORD PTR [eax+16], 104	; 00000068H
  00090	75 1a		 jne	 SHORT $LN7@Infinite_S
  00092	8b 4d f8	 mov	 ecx, DWORD PTR _traced$[ebp]
  00095	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00098	3b 55 10	 cmp	 edx, DWORD PTR _P$[ebp]
  0009b	75 0f		 jne	 SHORT $LN7@Infinite_S
  0009d	83 7d f4 01	 cmp	 DWORD PTR _Count_PUSH_Instructions$[ebp], 1
  000a1	75 09		 jne	 SHORT $LN7@Infinite_S
; Line 186
  000a3	8b 45 f0	 mov	 eax, DWORD PTR _Num_PUSH_Matched$[ebp]
  000a6	83 c0 01	 add	 eax, 1
  000a9	89 45 f0	 mov	 DWORD PTR _Num_PUSH_Matched$[ebp], eax
$LN7@Infinite_S:
; Line 188
  000ac	83 7d f0 01	 cmp	 DWORD PTR _Num_PUSH_Matched$[ebp], 1
  000b0	75 13		 jne	 SHORT $LN8@Infinite_S
  000b2	83 7d fc 00	 cmp	 DWORD PTR _N$1[ebp], 0
  000b6	75 0d		 jne	 SHORT $LN8@Infinite_S
  000b8	83 7d ec 00	 cmp	 DWORD PTR _Conditional_Branch_Count$[ebp], 0
  000bc	75 07		 jne	 SHORT $LN8@Infinite_S
; Line 189
  000be	b8 03 00 00 00	 mov	 eax, 3
  000c3	eb 04		 jmp	 SHORT $LN1@Infinite_S
$LN8@Infinite_S:
; Line 190
  000c5	eb 85		 jmp	 SHORT $LN2@Infinite_S
$LN3@Infinite_S:
; Line 191
  000c7	33 c0		 xor	 eax, eax
$LN1@Infinite_S:
; Line 192
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c3		 ret	 0
_Infinite_Simulation_Needs_To_Be_Aborted_Trace0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_next2last$ = -24					; size = 4
_size$ = -20						; size = 4
_ptr$ = -16						; size = 4
_Conditional_Branch_Count$ = -12			; size = 4
_traced$ = -8						; size = 4
_N$ = -4						; size = 4
_execution_trace$ = 8					; size = 4
_current$ = 12						; size = 4
_Infinite_Recursion_Needs_To_Be_Aborted_Trace PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 138
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
; Line 140
  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _Conditional_Branch_Count$[ebp], 0
; Line 142
  0000d	8b 45 08	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  00010	89 45 f0	 mov	 DWORD PTR _ptr$[ebp], eax
; Line 143
  00013	b9 04 00 00 00	 mov	 ecx, 4
  00018	6b d1 ff	 imul	 edx, ecx, -1
  0001b	8b 45 f0	 mov	 eax, DWORD PTR _ptr$[ebp]
  0001e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00021	89 4d ec	 mov	 DWORD PTR _size$[ebp], ecx
; Line 144
  00024	8b 45 ec	 mov	 eax, DWORD PTR _size$[ebp]
  00027	33 d2		 xor	 edx, edx
  00029	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0002e	f7 f1		 div	 ecx
  00030	83 e8 02	 sub	 eax, 2
  00033	89 45 e8	 mov	 DWORD PTR _next2last$[ebp], eax
; Line 147
  00036	8b 55 e8	 mov	 edx, DWORD PTR _next2last$[ebp]
  00039	89 55 fc	 mov	 DWORD PTR _N$[ebp], edx
  0003c	eb 09		 jmp	 SHORT $LN4@Infinite_R
$LN2@Infinite_R:
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _N$[ebp]
  00041	83 e8 01	 sub	 eax, 1
  00044	89 45 fc	 mov	 DWORD PTR _N$[ebp], eax
$LN4@Infinite_R:
  00047	83 7d fc 00	 cmp	 DWORD PTR _N$[ebp], 0
  0004b	7c 5f		 jl	 SHORT $LN3@Infinite_R
; Line 149
  0004d	6b 4d fc 18	 imul	 ecx, DWORD PTR _N$[ebp], 24
  00051	03 4d 08	 add	 ecx, DWORD PTR _execution_trace$[ebp]
  00054	89 4d f8	 mov	 DWORD PTR _traced$[ebp], ecx
; Line 150
  00057	8b 55 f8	 mov	 edx, DWORD PTR _traced$[ebp]
  0005a	83 7a 10 7f	 cmp	 DWORD PTR [edx+16], 127	; 0000007fH
  0005e	75 09		 jne	 SHORT $LN5@Infinite_R
; Line 151
  00060	8b 45 f4	 mov	 eax, DWORD PTR _Conditional_Branch_Count$[ebp]
  00063	83 c0 01	 add	 eax, 1
  00066	89 45 f4	 mov	 DWORD PTR _Conditional_Branch_Count$[ebp], eax
$LN5@Infinite_R:
; Line 153
  00069	8b 4d 0c	 mov	 ecx, DWORD PTR _current$[ebp]
  0006c	81 79 10 e8 00
	00 00		 cmp	 DWORD PTR [ecx+16], 232	; 000000e8H
  00073	75 35		 jne	 SHORT $LN6@Infinite_R
; Line 154
  00075	8b 55 0c	 mov	 edx, DWORD PTR _current$[ebp]
  00078	8b 45 f8	 mov	 eax, DWORD PTR _traced$[ebp]
  0007b	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  0007e	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00081	75 27		 jne	 SHORT $LN6@Infinite_R
; Line 155
  00083	8b 55 0c	 mov	 edx, DWORD PTR _current$[ebp]
  00086	8b 45 f8	 mov	 eax, DWORD PTR _traced$[ebp]
  00089	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0008b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0008d	75 1b		 jne	 SHORT $LN6@Infinite_R
; Line 156
  0008f	8b 55 0c	 mov	 edx, DWORD PTR _current$[ebp]
  00092	8b 45 f8	 mov	 eax, DWORD PTR _traced$[ebp]
  00095	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00098	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0009b	75 0d		 jne	 SHORT $LN6@Infinite_R
; Line 157
  0009d	83 7d f4 00	 cmp	 DWORD PTR _Conditional_Branch_Count$[ebp], 0
  000a1	75 07		 jne	 SHORT $LN6@Infinite_R
; Line 158
  000a3	b8 02 00 00 00	 mov	 eax, 2
  000a8	eb 04		 jmp	 SHORT $LN1@Infinite_R
$LN6@Infinite_R:
; Line 159
  000aa	eb 92		 jmp	 SHORT $LN2@Infinite_R
$LN3@Infinite_R:
; Line 160
  000ac	33 c0		 xor	 eax, eax
$LN1@Infinite_R:
; Line 161
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
_Infinite_Recursion_Needs_To_Be_Aborted_Trace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_next2last$ = -24					; size = 4
_size$ = -20						; size = 4
_ptr$ = -16						; size = 4
_traced$ = -12						; size = 4
_Conditional_Branch_Count$ = -8				; size = 4
_N$ = -4						; size = 4
_execution_trace$ = 8					; size = 4
_current$ = 12						; size = 4
_Infinite_Loop_Needs_To_Be_Aborted_Trace PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 112
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
; Line 114
  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Conditional_Branch_Count$[ebp], 0
; Line 116
  0000d	8b 45 08	 mov	 eax, DWORD PTR _execution_trace$[ebp]
  00010	89 45 f0	 mov	 DWORD PTR _ptr$[ebp], eax
; Line 117
  00013	b9 04 00 00 00	 mov	 ecx, 4
  00018	6b d1 ff	 imul	 edx, ecx, -1
  0001b	8b 45 f0	 mov	 eax, DWORD PTR _ptr$[ebp]
  0001e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00021	89 4d ec	 mov	 DWORD PTR _size$[ebp], ecx
; Line 118
  00024	8b 45 ec	 mov	 eax, DWORD PTR _size$[ebp]
  00027	33 d2		 xor	 edx, edx
  00029	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0002e	f7 f1		 div	 ecx
  00030	83 e8 02	 sub	 eax, 2
  00033	89 45 e8	 mov	 DWORD PTR _next2last$[ebp], eax
; Line 121
  00036	8b 55 e8	 mov	 edx, DWORD PTR _next2last$[ebp]
  00039	89 55 fc	 mov	 DWORD PTR _N$[ebp], edx
  0003c	eb 09		 jmp	 SHORT $LN4@Infinite_L
$LN2@Infinite_L:
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _N$[ebp]
  00041	83 e8 01	 sub	 eax, 1
  00044	89 45 fc	 mov	 DWORD PTR _N$[ebp], eax
$LN4@Infinite_L:
  00047	83 7d fc 00	 cmp	 DWORD PTR _N$[ebp], 0
  0004b	7c 51		 jl	 SHORT $LN3@Infinite_L
; Line 123
  0004d	6b 4d fc 18	 imul	 ecx, DWORD PTR _N$[ebp], 24
  00051	03 4d 08	 add	 ecx, DWORD PTR _execution_trace$[ebp]
  00054	89 4d f4	 mov	 DWORD PTR _traced$[ebp], ecx
; Line 124
  00057	8b 55 f4	 mov	 edx, DWORD PTR _traced$[ebp]
  0005a	83 7a 10 7f	 cmp	 DWORD PTR [edx+16], 127	; 0000007fH
  0005e	75 09		 jne	 SHORT $LN5@Infinite_L
; Line 125
  00060	8b 45 f8	 mov	 eax, DWORD PTR _Conditional_Branch_Count$[ebp]
  00063	83 c0 01	 add	 eax, 1
  00066	89 45 f8	 mov	 DWORD PTR _Conditional_Branch_Count$[ebp], eax
$LN5@Infinite_L:
; Line 127
  00069	8b 4d 0c	 mov	 ecx, DWORD PTR _current$[ebp]
  0006c	81 79 10 eb 00
	00 00		 cmp	 DWORD PTR [ecx+16], 235	; 000000ebH
  00073	75 27		 jne	 SHORT $LN6@Infinite_L
; Line 128
  00075	8b 55 0c	 mov	 edx, DWORD PTR _current$[ebp]
  00078	8b 45 0c	 mov	 eax, DWORD PTR _current$[ebp]
  0007b	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0007e	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00080	77 1a		 ja	 SHORT $LN6@Infinite_L
; Line 129
  00082	8b 55 f4	 mov	 edx, DWORD PTR _traced$[ebp]
  00085	8b 45 0c	 mov	 eax, DWORD PTR _current$[ebp]
  00088	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0008a	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0008d	75 0d		 jne	 SHORT $LN6@Infinite_L
; Line 130
  0008f	83 7d f8 00	 cmp	 DWORD PTR _Conditional_Branch_Count$[ebp], 0
  00093	75 07		 jne	 SHORT $LN6@Infinite_L
; Line 131
  00095	b8 01 00 00 00	 mov	 eax, 1
  0009a	eb 04		 jmp	 SHORT $LN1@Infinite_L
$LN6@Infinite_L:
; Line 132
  0009c	eb a0		 jmp	 SHORT $LN2@Infinite_L
$LN3@Infinite_L:
; Line 133
  0009e	33 c0		 xor	 eax, eax
$LN1@Infinite_L:
; Line 134
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
_Infinite_Loop_Needs_To_Be_Aborted_Trace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_size$ = -8						; size = 4
_N$1 = -4						; size = 4
_source$ = 8						; size = 4
_destination$ = 12					; size = 4
_CopyMachineCode PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 94
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; Line 96
  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _size$[ebp], 0
  0000d	eb 09		 jmp	 SHORT $LN4@CopyMachin
$LN2@CopyMachin:
  0000f	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  00012	83 c0 01	 add	 eax, 1
  00015	89 45 f8	 mov	 DWORD PTR _size$[ebp], eax
$LN4@CopyMachin:
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  0001b	03 4d f8	 add	 ecx, DWORD PTR _size$[ebp]
  0001e	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00021	81 fa cc 00 00
	00		 cmp	 edx, 204		; 000000ccH
  00027	74 02		 je	 SHORT $LN3@CopyMachin
; Line 97
  00029	eb e4		 jmp	 SHORT $LN2@CopyMachin
$LN3@CopyMachin:
; Line 98
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _Allocate
  00034	83 c4 04	 add	 esp, 4
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _destination$[ebp]
  0003a	89 01		 mov	 DWORD PTR [ecx], eax
; Line 99
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _N$1[ebp], 0
  00043	eb 09		 jmp	 SHORT $LN7@CopyMachin
$LN5@CopyMachin:
  00045	8b 55 fc	 mov	 edx, DWORD PTR _N$1[ebp]
  00048	83 c2 01	 add	 edx, 1
  0004b	89 55 fc	 mov	 DWORD PTR _N$1[ebp], edx
$LN7@CopyMachin:
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _N$1[ebp]
  00051	3b 45 f8	 cmp	 eax, DWORD PTR _size$[ebp]
  00054	73 2c		 jae	 SHORT $LN6@CopyMachin
; Line 101
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00059	03 4d fc	 add	 ecx, DWORD PTR _N$1[ebp]
  0005c	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0005f	52		 push	 edx
  00060	68 00 00 00 00	 push	 OFFSET $SG9419
  00065	e8 00 00 00 00	 call	 _Output
  0006a	83 c4 08	 add	 esp, 8
; Line 102
  0006d	8b 45 fc	 mov	 eax, DWORD PTR _N$1[ebp]
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _destination$[ebp]
  00073	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00076	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00079	03 45 fc	 add	 eax, DWORD PTR _N$1[ebp]
  0007c	8a 08		 mov	 cl, BYTE PTR [eax]
  0007e	88 0a		 mov	 BYTE PTR [edx], cl
; Line 103
  00080	eb c3		 jmp	 SHORT $LN5@CopyMachin
$LN6@CopyMachin:
; Line 104
  00082	ba 04 00 00 00	 mov	 edx, 4
  00087	6b c2 ff	 imul	 eax, edx, -1
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR _destination$[ebp]
  0008d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008f	8b 4d f8	 mov	 ecx, DWORD PTR _size$[ebp]
  00092	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx
; Line 105
  00095	ba 04 00 00 00	 mov	 edx, 4
  0009a	6b c2 ff	 imul	 eax, edx, -1
  0009d	8b 4d 0c	 mov	 ecx, DWORD PTR _destination$[ebp]
  000a0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a2	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  000a5	50		 push	 eax
  000a6	68 00 00 00 00	 push	 OFFSET $SG9420
  000ab	e8 00 00 00 00	 call	 _Output
  000b0	83 c4 08	 add	 esp, 8
; Line 106
  000b3	b9 04 00 00 00	 mov	 ecx, 4
  000b8	6b d1 fe	 imul	 edx, ecx, -2
  000bb	8b 45 0c	 mov	 eax, DWORD PTR _destination$[ebp]
  000be	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c0	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  000c3	52		 push	 edx
  000c4	68 00 00 00 00	 push	 OFFSET $SG9421
  000c9	e8 00 00 00 00	 call	 _Output
  000ce	83 c4 08	 add	 esp, 8
; Line 107
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
_CopyMachineCode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = 8						; size = 4
_Output_Decoded PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 89
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
_Output_Decoded ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Last_Address_Of_Operating_System PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 88
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	33 c0		 xor	 eax, eax
  00005	5d		 pop	 ebp
  00006	c3		 ret	 0
_Last_Address_Of_Operating_System ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_EIP$ = 8						; size = 4
_get_code_end PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 87
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	33 c0		 xor	 eax, eax
  00005	5d		 pop	 ebp
  00006	c3		 ret	 0
_get_code_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_S$ = 8							; size = 4
_M$ = 12						; size = 4
_StackPush PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 86
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	33 c0		 xor	 eax, eax
  00005	5d		 pop	 ebp
  00006	c3		 ret	 0
_StackPush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_stdvector$ = 8						; size = 4
_data_ptr$ = 12						; size = 4
_size_in_bytes$ = 16					; size = 4
_PushBack PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 85
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
_PushBack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_master_state$ = 8					; size = 4
_slave_state$ = 12					; size = 4
_decoded$ = 16						; size = 4
_DebugStep PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 84
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	33 c0		 xor	 eax, eax
  00005	5d		 pop	 ebp
  00006	c3		 ret	 0
_DebugStep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_state$ = 8						; size = 4
_LoadState PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 82
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
_LoadState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_state$ = 8						; size = 4
_SaveState PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 81
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
_SaveState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_size$ = 8						; size = 4
_Allocate PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 80
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	33 c0		 xor	 eax, eax
  00005	5d		 pop	 ebp
  00006	c3		 ret	 0
_Allocate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_S$ = 8							; size = 4
_N$ = 12						; size = 4
_Output	PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 79
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
_Output	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_S$ = 8							; size = 4
_OutputString PROC
; File d:\_hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\prior_versions\2023_02_07\halt7.c
; Line 78
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
_OutputString ENDP
_TEXT	ENDS
END
